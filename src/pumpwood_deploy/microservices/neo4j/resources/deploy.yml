apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
spec:
  replicas: 1
  selector:
    matchLabels:
      type: db
      endpoint: neo4j
      function: graph
  template:
    metadata:
      labels:
        type: db
        endpoint: neo4j
        function: graph
    spec:
      volumes:
      - name: neo4j-data
        persistentVolumeClaim:
          claimName: {volume_claim_name}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: function
                operator: NotIn
                values:
                - system
      containers:
      # Postgres Container
      - name: neo4j
        image: neo4j:{version}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "{requests_memory}"
            cpu:  "{requests_cpu}"
          limits:
            memory: "{limits_memory}"
            cpu:  "{limits_cpu}"
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: neo4j
              key: db_auth
        - name: NEO4J_dbms_default__listen__address
          value: "0.0.0.0"
        - name: NEO4J_dbms_connector_bolt_enabled
          value: "true"
        - name: NEO4J_dbms_ssl_policy_bolt_enabled
          value: "false"
        - name: NEO4J_dbms_connector_bolt_tls__level
          value: "DISABLED"
        - name: NEO4J_dbms_connector_bolt_listen__address
          value: "0.0.0.0:7687"
        - name: NEO4J_dbms_connector_bolt_advertised__address
          value: ":7687"
        volumeMounts:
        - name: "neo4j-data"
          mountPath: /var/lib/neo4j/data
        ports:
        - containerPort: 7687
---
apiVersion : "v1"
kind: Service
metadata:
  name: neo4j
  labels:
    type: db
    endpoint: neo4j
    function: graph
spec:
  type: ClusterIP
  ports:
    - port: 7687
      targetPort: 7687
  selector:
    type: db
    endpoint: neo4j
    function: graph
