window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pumpwood_deploy", "modulename": "pumpwood_deploy", "kind": "module", "doc": "<h1 id=\"pumpwood-deployment-package\">Pumpwood Deployment Package</h1>\n\n<p>This package will help to deploy Pumpwood on K8s from Azure, AWS and GCP cloud\nprofider. It is structure to create yml files from templates and apply the\nconfiguration change on K8s clusters.</p>\n\n<p>Deployment is structured as objects that are added to deploy using\n<code>add_microservice</code> function of DeployPumpWood object.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>It is usually a good patter to put versions of the containers as enviroment\nvariables set at <code>.env</code> file. Secrets could be stored on a json file, with a\n.gitignore entry to avoid uploading them to repository.</p>\n\n<p>It is not necessary to comment deployments when updating containers, if\nnot change if found between the yml file and configuration present at cluster\napply will results on no changes at the cluster.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">simplejson</span> <span class=\"k\">as</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_deploy.deploy</span> <span class=\"kn\">import</span> <span class=\"n\">DeployPumpWood</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_deploy.microservices.api_gateway.deploy</span> <span class=\"kn\">import</span> <span class=\"n\">CORSTerminaton</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_deploy.ingress.aws.deploy</span> <span class=\"kn\">import</span> <span class=\"n\">IngressALB</span>\n\n<span class=\"c1\"># Postgres</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_deploy.microservices.postgres.deploy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">PostgresDatabase</span><span class=\"p\">,</span> <span class=\"n\">PGBouncerDatabase</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Base</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_deploy.microservices.pumpwood_auth.deploy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">PumpWoodAuthMicroservice</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_deploy.microservices.pumpwood_datalake.deploy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">PumpWoodDatalakeMicroservice</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">################</span>\n<span class=\"c1\"># Read secrets #</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;secret-place-for-a-secret/secret-file.unreachable&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"n\">load_dotenv</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#########################</span>\n<span class=\"c1\"># Create deploy objects #</span>\n<span class=\"c1\"># Create a base</span>\n<span class=\"n\">deploy</span> <span class=\"o\">=</span> <span class=\"n\">DeployPumpWood</span><span class=\"p\">(</span>\n    <span class=\"n\">model_user_password</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;microservices--model&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">rabbitmq_secret</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;rabbitmq_secret&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">hash_salt</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash_salt&quot;</span><span class=\"p\">],</span>\n\n    <span class=\"n\">kong_db_disk_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-disk-for-kong&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Size of the disk that will be used to deploy postgres por</span>\n    <span class=\"c1\"># Postgres associated with Kong Service Mesh</span>\n    <span class=\"n\">kong_db_disk_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;10Gi&quot;</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Provider for flat file storage</span>\n    <span class=\"n\">k8_provider</span><span class=\"o\">=</span><span class=\"s2\">&quot;aws&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">k8_deploy_args</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;region&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nice-zone&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;cluster_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nice-cluster&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">k8_namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-namespace&quot;</span><span class=\"p\">,</span>\n\n    <span class=\"n\">storage_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;aws_s3&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">storage_deploy_args</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;storage_bucket_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;nice-bucket&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;access_key_id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;very-secret-id-access-bucket-aws&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;secret_access_key&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;very-secret-key-access-bucket-aws&quot;</span>\n    <span class=\"p\">})</span>\n\n<span class=\"c1\"># It os possible to add the services that will be</span>\n<span class=\"c1\"># deployed, here a Postgres DaataBase will be deployed</span>\n<span class=\"c1\"># using a pre-created disk at AWS</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">PostgresDatabase</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Database credentials</span>\n        <span class=\"n\">db_username</span><span class=\"o\">=</span><span class=\"s2\">&quot;pumpwood&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_password</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-password-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">disk_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;150Gi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">disk_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;name-of-the-nice-disk&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Limits the memory consumption, this is particulary important</span>\n        <span class=\"c1\"># for database that will consume most of the memory if pemited to</span>\n        <span class=\"c1\"># do so.</span>\n        <span class=\"n\">postgres_limits_memory</span><span class=\"o\">=</span><span class=\"s2\">&quot;4Gi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_limits_cpu</span><span class=\"o\">=</span><span class=\"s2\">&quot;4000m&quot;</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Add a CORS NGINX termination to Pumpwood at an API Gateway</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">CORSTerminaton</span><span class=\"p\">(</span>\n        <span class=\"n\">repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-aws-project.dkr.ecr.nice-zone.amazonaws.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">&#39;API_GATEWAY&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">health_check_url</span><span class=\"o\">=</span><span class=\"s2\">&quot;health-check/pumpwood-auth-app/&quot;</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Using deploy on AWS it is possible to use Aplication Load Balancer to</span>\n<span class=\"c1\"># redirect requests using sub-domains.</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">IngressALB</span><span class=\"p\">(</span>\n        <span class=\"n\">alb_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;name-of-the-nice-alb&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">group_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-alb-group&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Set an URL to be used as health check for the application</span>\n        <span class=\"c1\"># it is a good choice to use auth health check end-point</span>\n        <span class=\"n\">health_check_url</span><span class=\"o\">=</span><span class=\"s2\">&quot;/health-check/pumpwood-auth-app/&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Certificate to add HTTPs at ALB requests</span>\n        <span class=\"n\">certificate_arn</span><span class=\"o\">=</span><span class=\"s2\">&quot;arn:aws:acm:nice-zone:nice-aws-project:certificate/nice-certificate-arn&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice.hostname.cool&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Set service name that will redirect calls to containers</span>\n        <span class=\"n\">service_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;apigateway-nginx&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">service_port</span><span class=\"o\">=</span><span class=\"mi\">80</span>\n    <span class=\"p\">))</span>\n\n<span class=\"c1\"># Adding a PgBouncer to reduce connections with database</span>\n<span class=\"c1\"># Image associated with pgbouncer will automatically create</span>\n<span class=\"c1\"># database if necessary.</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">PGBouncerDatabase</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;pgbouncer-hive-metastore&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_database</span><span class=\"o\">=</span><span class=\"s2\">&quot;hive_metastore&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Use Postgres deployed as unique database to reduce memory and</span>\n        <span class=\"c1\"># CPU consumption at cluster, it is possible to split each</span>\n        <span class=\"c1\"># Microserice on a different database if necessary</span>\n        <span class=\"n\">postgres_secret</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_host</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">))</span>\n\n<span class=\"c1\">########</span>\n<span class=\"c1\"># Auth #</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">PGBouncerDatabase</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;pgbouncer-pumpwood-auth&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_database</span><span class=\"o\">=</span><span class=\"s2\">&quot;pumpwood_auth&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Use Postgres deployed as unique database to reduce memory and</span>\n        <span class=\"c1\"># CPU consumption at cluster, it is possible to split each</span>\n        <span class=\"c1\"># Microserice on a different database if necessary</span>\n        <span class=\"n\">postgres_secret</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_host</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">PumpWoodAuthMicroservice</span><span class=\"p\">(</span>\n        <span class=\"n\">repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-aws-project.dkr.ecr.nice-zone.amazonaws.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">static_repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-aws-project.dkr.ecr.nice-zone.amazonaws.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_username</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-username-for-postgres&quot;</span><span class=\"p\">,,</span>\n        <span class=\"n\">db_password</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-password-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_host</span><span class=\"o\">=</span><span class=\"s2\">&quot;pgbouncer-pumpwood-auth&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_port</span><span class=\"o\">=</span><span class=\"s2\">&quot;5432&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_database</span><span class=\"o\">=</span><span class=\"s2\">&quot;pumpwood_auth&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">microservice_password</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-password-for-microservice&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-secret-key-for-django&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">email_host_user</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-email-user&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">email_host_password</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-email-password&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-bucket-name&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">app_version</span><span class=\"o\">=</span><span class=\"s2\">&quot;1.0&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">static_version</span><span class=\"o\">=</span><span class=\"s2\">&quot;1.0&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_log_version</span><span class=\"o\">=</span><span class=\"s2\">&quot;3.0&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Regulate the number of replicas that will be applied at</span>\n        <span class=\"c1\"># deploment</span>\n        <span class=\"n\">app_replicas</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">app_debug</span><span class=\"o\">=</span><span class=\"s2\">&quot;FALSE&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_log_disk_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-volume-to-store-staged-logs&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_log_disk_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;20Gi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_trino_catalog</span><span class=\"o\">=</span><span class=\"s2\">&quot;aws&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"n\">mfa_application_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is a nice App&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">mfa_twilio_sender_phone_number</span><span class=\"o\">=</span><span class=\"s1\">&#39;9999999&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">mfa_twilio_account_sid</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-twilo-account&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">mfa_twilio_auth_token</span><span class=\"o\">=</span><span class=\"s1\">&#39;nice-twilo-token&#39;</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\">############</span>\n<span class=\"c1\"># Datalake #</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">PGBouncerDatabase</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;pgbouncer-pumpwood-datalake&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_database</span><span class=\"o\">=</span><span class=\"s2\">&quot;pumpwood_datalake&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Use Postgres deployed as unique database to reduce memory and</span>\n        <span class=\"c1\"># CPU consumption at cluster, it is possible to split each</span>\n        <span class=\"c1\"># Microserice on a different database if necessary</span>\n        <span class=\"n\">postgres_secret</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">postgres_host</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-name-for-postgres&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">add_microservice</span><span class=\"p\">(</span>\n    <span class=\"n\">PumpWoodDatalakeMicroservice</span><span class=\"p\">(</span>\n        <span class=\"n\">repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-aws-project.dkr.ecr.nice-zone.amazonaws.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_username</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-username-for-postgres&quot;</span><span class=\"p\">,,</span>\n        <span class=\"n\">db_password</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-password-for-postgres&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_host</span><span class=\"o\">=</span><span class=\"s2\">&quot;pgbouncer-pumpwood-datalake&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_port</span><span class=\"o\">=</span><span class=\"s2\">&quot;5432&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">db_database</span><span class=\"o\">=</span><span class=\"s2\">&quot;pumpwood_datalake&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">microservice_password</span><span class=\"o\">=</span><span class=\"s1\">&#39;nice-password-for-datalake-microservice-user&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;nice-bucket-name&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">app_version</span><span class=\"o\">=</span><span class=\"s1\">&#39;1,0&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_version</span><span class=\"o\">=</span><span class=\"s1\">&#39;2.0&#39;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># App</span>\n        <span class=\"n\">app_debug</span><span class=\"o\">=</span><span class=\"s1\">&#39;FALSE&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">app_replicas</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Limits APP memory and CPU consumption</span>\n        <span class=\"n\">app_limits_memory</span><span class=\"o\">=</span><span class=\"s2\">&quot;6Gi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">app_limits_cpu</span><span class=\"o\">=</span><span class=\"s2\">&quot;4000m&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">app_requests_memory</span><span class=\"o\">=</span><span class=\"s2\">&quot;10Mi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">app_requests_cpu</span><span class=\"o\">=</span><span class=\"s2\">&quot;1m&quot;</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Limits Worker memory and CPU consumption</span>\n        <span class=\"n\">worker_replicas</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_limits_memory</span><span class=\"o\">=</span><span class=\"s2\">&quot;6Gi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_limits_cpu</span><span class=\"o\">=</span><span class=\"s2\">&quot;2000m&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_requests_memory</span><span class=\"o\">=</span><span class=\"s2\">&quot;10Mi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">worker_requests_cpu</span><span class=\"o\">=</span><span class=\"s2\">&quot;1m&quot;</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\">###############################################</span>\n<span class=\"c1\"># Create deployment yml and  apply to cluster #</span>\n<span class=\"c1\"># This function will generate all yml and sh scripts to deploy</span>\n<span class=\"c1\"># the services, deployments and other K8s components, but will not</span>\n<span class=\"c1\"># apply them.</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">create_deploy_files</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># This will create all file, and apply them in the sequence that were added to</span>\n<span class=\"c1\"># deploy object, some apply of yml have a delay to let components be corretly</span>\n<span class=\"c1\"># created before move on with the deploy</span>\n<span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">deploy_microservices</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood_deploy.airflow", "modulename": "pumpwood_deploy.airflow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy", "modulename": "pumpwood_deploy.airflow.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.app_deployment", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: simple-airflow--webserver\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: airflow\\n      function: webserver\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: airflow\\n        function: webserver\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      - name: airflow--gitkey\\n        secret:\\n          secretName: airflow--gitkey\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: simple-airflow--webserver\\n        image: andrebaceti/simple-airflow:0.22\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n          - name: airflow--gitkey\\n            readOnly: true\\n            mountPath: /ssh_keys/\\n        ports:\\n        - containerPort: 8080\\n        env:\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # AIRFLOW\\n        - name: AIRFLOW__WEBSERVER__SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: secret_key\\n        - name: AIRFLOW__CORE__FERNET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: fernet_key\\n        - name: AIRFLOW__KUBERNETES__NAMESPACE\\n          value: {k8s_pods_namespace}\\n        - name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER\\n          value: &quot;{remote_base_log_folder}&quot;\\n        - name: AIRFLOW__LOGGING__REMOTE_LOGGING\\n          value: &quot;{remote_logging}&quot;\\n        - name: AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID\\n          value: &quot;{remote_log_conn_id}&quot;\\n\\n        # Git\\n        - name: GIT_SERVER\\n          value: &quot;{git_server}&quot;\\n        - name: GIT_REPOSITORY\\n          value: &quot;{git_repository}&quot;\\n        - name: GIT_BRANCH\\n          value: &quot;{git_branch}&quot;\\n\\n        # DATABASE\\n        - name: DB_USERNAME\\n          value: &quot;{db_username}&quot;\\n        - name: DB_HOST\\n          value: &quot;{db_host}&quot;\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: db_password\\n\\n        # KONG\\n        - name: KONG_API_URL\\n          value: &quot;http://load-balancer:8001&quot;\\n        - name: SERVICE_URL\\n          value: &quot;http://simple-airflow--webserver:5000/&quot;\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: simple-airflow--webserver\\n  labels:\\n    type: app\\n    endpoint: airflow\\n    function: webserver\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 8080\\n  selector:\\n    type: app\\n    endpoint: airflow\\n    function: webserver\\n&#x27;"}, {"fullname": "pumpwood_deploy.airflow.deploy.scheduler_deployment", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "scheduler_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: simple-airflow--scheduler\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: airflow\\n      function: scheduler\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: airflow\\n        function: scheduler\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      - name: airflow--gitkey\\n        secret:\\n          secretName: airflow--gitkey\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: simple-airflow--scheduler\\n        image: andrebaceti/simple-airflow:0.22\\n        imagePullPolicy: IfNotPresent\\n        command: [&quot;bash&quot;]\\n        args: [&quot;/airflow/start_airflow__scheduler.bash&quot;]\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n          - name: airflow--gitkey\\n            readOnly: true\\n            mountPath: /ssh_keys/\\n        env:\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # AIRFLOW\\n        - name: AIRFLOW__WEBSERVER__SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: secret_key\\n        - name: AIRFLOW__CORE__FERNET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: fernet_key\\n        - name: AIRFLOW__KUBERNETES__NAMESPACE\\n          value: {k8s_pods_namespace}\\n        - name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER\\n          value: &quot;{remote_base_log_folder}&quot;\\n        - name: AIRFLOW__LOGGING__REMOTE_LOGGING\\n          value: &quot;{remote_logging}&quot;\\n        - name: AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID\\n          value: &quot;{remote_log_conn_id}&quot;\\n\\n        # Git\\n        - name: GIT_SERVER\\n          value: &quot;{git_server}&quot;\\n        - name: GIT_REPOSITORY\\n          value: &quot;{git_repository}&quot;\\n        - name: GIT_BRANCH\\n          value: &quot;{git_branch}&quot;\\n\\n        # DATABASE\\n        - name: DB_USERNAME\\n          value: &quot;{db_username}&quot;\\n        - name: DB_HOST\\n          value: &quot;{db_host}&quot;\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: db_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.airflow.deploy.worker_deployment", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "worker_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: simple-airflow--worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: airflow\\n      function: worker\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: airflow\\n        function: worker\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      - name: airflow--gitkey\\n        secret:\\n          secretName: airflow--gitkey\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: simple-airflow--scheduler\\n        image: andrebaceti/simple-airflow:0.22\\n        imagePullPolicy: IfNotPresent\\n        command: [&quot;bash&quot;]\\n        args: [&quot;/airflow/start_airflow__worker.bash&quot;]\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n          - name: airflow--gitkey\\n            readOnly: true\\n            mountPath: /ssh_keys/\\n        ports:\\n        - containerPort: 8793\\n        env:\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # AIRFLOW\\n        - name: AIRFLOW__WEBSERVER__SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: secret_key\\n        - name: AIRFLOW__CORE__FERNET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: fernet_key\\n        - name: AIRFLOW__KUBERNETES__NAMESPACE\\n          value: {k8s_pods_namespace}\\n        - name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER\\n          value: &quot;{remote_base_log_folder}&quot;\\n        - name: AIRFLOW__LOGGING__REMOTE_LOGGING\\n          value: &quot;{remote_logging}&quot;\\n        - name: AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID\\n          value: &quot;{remote_log_conn_id}&quot;\\n        # Ajust log collection from workers using IP address of the POD\\n        - name: AIRFLOW__CORE__HOSTNAME_CALLABLE\\n          value: \\&#x27;airflow.utils.net:get_host_ip_address\\&#x27;\\n\\n        # Git\\n        - name: GIT_SERVER\\n          value: &quot;{git_server}&quot;\\n        - name: GIT_REPOSITORY\\n          value: &quot;{git_repository}&quot;\\n        - name: GIT_BRANCH\\n          value: &quot;{git_branch}&quot;\\n\\n        # DATABASE\\n        - name: DB_USERNAME\\n          value: &quot;{db_username}&quot;\\n        - name: DB_HOST\\n          value: &quot;{db_host}&quot;\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: simple-airflow\\n              key: db_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.airflow.deploy.secrets", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: simple-airflow\\ntype: Opaque\\ndata:\\n  secret_key: {secret_key}\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n  fernet_key: {fernet_key}\\n&#x27;"}, {"fullname": "pumpwood_deploy.airflow.deploy.service_account", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "service_account", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRole\\nmetadata:\\n  name: airflow--pod-launcher-role\\n  labels:\\n    tier: airflow\\nrules:\\n  - apiGroups:\\n      - &quot;&quot;\\n    resources:\\n      - &quot;pods&quot;\\n    verbs:\\n      - &quot;create&quot;\\n      - &quot;list&quot;\\n      - &quot;get&quot;\\n      - &quot;patch&quot;\\n      - &quot;watch&quot;\\n      - &quot;delete&quot;\\n  - apiGroups:\\n      - &quot;&quot;\\n    resources:\\n      - &quot;pods/log&quot;\\n    verbs:\\n      - &quot;get&quot;\\n  - apiGroups:\\n      - &quot;&quot;\\n    resources:\\n      - &quot;pods/exec&quot;\\n    verbs:\\n      - &quot;create&quot;\\n      - &quot;get&quot;\\n  - apiGroups:\\n      - &quot;&quot;\\n    resources:\\n      - &quot;events&quot;\\n    verbs:\\n      - &quot;list&quot;\\n---\\nkind: ClusterRoleBinding\\napiVersion: rbac.authorization.k8s.io/v1\\nmetadata:\\n  name: airflow--pod-launcher-rolebinding\\n  labels:\\n    tier: airflow\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: ClusterRole\\n  name: airflow--pod-launcher-role\\nsubjects:\\n  - kind: ServiceAccount\\n    name: default\\n    namespace: {namespace}\\n&#x27;"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice", "kind": "class", "doc": "<p>PumpWoodDatalakeMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.__init__", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">secret_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fernet_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">k8s_pods_namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">git_ssh_private_key_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">git_ssh_public_key_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">git_server</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">git_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">git_branch</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-simple-airflow&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">remote_base_log_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">remote_logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">remote_log_conn_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_public_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span>)</span>"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.db_username", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.db_database", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.db_host", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.db_port", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.git_ssh_private_key_path", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.git_ssh_private_key_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.git_ssh_public_key_path", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.git_ssh_public_key_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.postgres_public_ip", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.postgres_public_ip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.k8s_pods_namespace", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.k8s_pods_namespace", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.remote_base_log_folder", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.remote_base_log_folder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.remote_logging", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.remote_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.remote_log_conn_id", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.remote_log_conn_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.git_server", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.git_server", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.git_repository", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.git_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.git_branch", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.git_branch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.bucket_name", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.disk_size", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.disk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.disk_name", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.disk_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.base_path", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.repository", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.app_replicas", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.worker_replicas", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.worker_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.deploy.AirflowMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.airflow.deploy", "qualname": "AirflowMicroservice.create_deployment_file", "kind": "function", "doc": "<p>create_deployment_file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.airflow.resources", "modulename": "pumpwood_deploy.airflow.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.tests", "modulename": "pumpwood_deploy.airflow.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice", "modulename": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice.TestAirflowMicroservice", "modulename": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice", "qualname": "TestAirflowMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice.TestAirflowMicroservice.load_balancer_address", "modulename": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice", "qualname": "TestAirflowMicroservice.load_balancer_address", "kind": "variable", "doc": "<p>Ip of the load balancer</p>\n", "default_value": "&#x27;http://0.0.0.0:8080/&#x27;"}, {"fullname": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice.TestAirflowMicroservice.apps_to_regenerate", "modulename": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice", "qualname": "TestAirflowMicroservice.apps_to_regenerate", "kind": "variable", "doc": "<p>Name of the apps to be regenerated after the test is over</p>\n", "default_value": "[&#x27;pumpwood-auth-app&#x27;]"}, {"fullname": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice.TestAirflowMicroservice.test__create_files", "modulename": "pumpwood_deploy.airflow.tests.test__AirflowMicroservice", "qualname": "TestAirflowMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.crawlers", "modulename": "pumpwood_deploy.crawlers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency", "modulename": "pumpwood_deploy.crawlers.cryptocurrency", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "kind": "module", "doc": "<p>Crawler for CryptoCurrency.</p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency", "kind": "class", "doc": "<p>CrawlerCryptoCurrency.</p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.__init__", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password (str):</strong>  Password for database.</li>\n<li><strong>microservice_password(str):</strong>  Microservice password.</li>\n<li><strong>bitfinex_api_key (str):</strong>  Bitfinex API Key.</li>\n<li><strong>bitfinex_api_secret (str):</strong>  Bitfinex API Secrets.</li>\n<li><strong>disk_size (str):</strong>  Disk size (ex.: 50Gi, 100Gi)</li>\n<li><strong>disk_name (str):</strong>  Name of the disk that will be used in postgres</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  Verison of the App image</li>\n<li><strong>worker_candle_version (str):</strong>  Version of the worker for candle data.</li>\n<li><strong>worker_balance_version (str):</strong>  Version of the worker for portfolio\nbalance data.</li>\n<li><strong>worker_order_version (str):</strong>  Version of the worker for place\norders in exchange.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>repository (str): Repository to pull Image\n  postgres_public_ip (str): Postgres public IP.\n  firewall_ips (list): List the IPs allowed to connect to datalake.\n  workers_timeout (str): Time to workout time for guicorn workers.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodETLMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bitfinex_api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bitfinex_api_secret</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_candle_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_balance_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_order_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_public_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">firewall_ips</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">candle_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">candle_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">candle_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">candle_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">balance_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">balance_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">balance_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">balance_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-crawler-cryptocurrency&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.postgres_public_ip", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.postgres_public_ip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.firewall_ips", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.firewall_ips", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.bucket_name", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.disk_size", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.disk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.disk_name", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.disk_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.base_path", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.repository", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_version", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_replicas", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_debug", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_timeout", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_workers", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_limits_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_limits_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_requests_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.app_requests_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.worker_candle_version", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.worker_candle_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.candle_limits_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.candle_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.candle_limits_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.candle_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.candle_requests_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.candle_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.candle_requests_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.candle_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.worker_balance_version", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.worker_balance_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.balance_limits_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.balance_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.balance_limits_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.balance_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.balance_requests_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.balance_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.balance_requests_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.balance_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.worker_order_version", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.worker_order_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.order_limits_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.order_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.order_limits_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.order_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.order_requests_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.order_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.order_requests_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.order_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.db_username", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.db_host", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.db_port", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.db_database", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.postgres_limits_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.postgres_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.postgres_limits_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.postgres_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.postgres_requests_memory", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.postgres_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.postgres_requests_cpu", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.postgres_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.test_db_version", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.test_db_repository", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.deploy.CrawlerCryptoCurrency.create_deployment_file", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.deploy", "qualname": "CrawlerCryptoCurrency.create_deployment_file", "kind": "function", "doc": "<p>create_deployment_file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kube_client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.app_deployment", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: crawler-cryptocurrency-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: crawler-cryptocurrency-app\\n      function: crawler\\n      data: cryptocurrency\\n  template:\\n    metadata:\\n      labels:\\n          type: app\\n          endpoint: crawler-cryptocurrency-app\\n          function: crawler\\n          data: cryptocurrency\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      containers:\\n      - name: crawler-cryptocurrency\\n        image: {repository}/crawler-cryptocurrency-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/crawler-cryptocurrency-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        ############\\n        # DATABASE #\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: crawler-cryptocurrency\\n              key: db_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n\\n        ############\\n        # RABBITMQ #\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #################\\n        # Microsservice #\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: microservice_password\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: crawler-cryptocurrency-app\\n  labels:\\n      type: app\\n      endpoint: crawler-cryptocurrency-app\\n      function: crawler\\n      data: cryptocurrency\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n      type: app\\n      endpoint: crawler-cryptocurrency-app\\n      function: crawler\\n      data: cryptocurrency\\n&#x27;"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.worker_candle_deployment", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "worker_candle_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: crawler-cryptocurrency--worker-candle\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: crawler-cryptocurrency-app\\n      function: worker-candle\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: crawler-cryptocurrency-app\\n          function: worker-candle\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      containers:\\n      - name: crawler-cryptocurrency-worker\\n        image: {repository}/crawler-cryptocurrency--worker-candle:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: microservice_password\\n&#x27;"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.worker_balance_deployment", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "worker_balance_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: crawler-cryptocurrency--worker-balance\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: crawler-cryptocurrency-app\\n      function: worker-balance\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: crawler-cryptocurrency-app\\n          function: worker-balance\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      containers:\\n      - name: crawler-cryptocurrency-worker\\n        image: {repository}/crawler-cryptocurrency--worker-balance:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: microservice_password\\n\\n        #################\\n        # Bitfinex Keys #\\n        - name: BITFINEX_API_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: bitfinex_api_key\\n        - name: BITFINEX_API_SECRET\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: bitfinex_api_secret\\n&#x27;"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.worker_order_deployment", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "worker_order_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: crawler-cryptocurrency--worker-order\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: crawler-cryptocurrency-app\\n      function: worker-order\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: crawler-cryptocurrency-app\\n          function: worker-order\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      containers:\\n      - name: crawler-cryptocurrency-worker\\n        image: {repository}/crawler-cryptocurrency--worker-order:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: microservice_password\\n\\n        #################\\n        # Bitfinex Keys #\\n        - name: BITFINEX_API_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: bitfinex_api_key\\n        - name: BITFINEX_API_SECRET\\n          valueFrom:\\n              secretKeyRef:\\n                name: crawler-cryptocurrency\\n                key: bitfinex_api_secret\\n&#x27;"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.secrets", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: crawler-cryptocurrency\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n  bitfinex_api_key: {bitfinex_api_key}\\n  bitfinex_api_secret: {bitfinex_api_secret}\\n  ssl_key: {ssl_key}\\n  ssl_crt: {ssl_crt}\\n&#x27;"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.services__load_balancer", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "services__load_balancer", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: loadbalancer-postgres-crawler-cryptocurrency\\n  labels:\\n      type: loadbalancer-db\\n      endpoint: crawler-cryptocurrency-app\\n      function: crawler\\n      data: cryptocurrency\\nspec:\\n  type: LoadBalancer\\n  ports:\\n    - port: 7000\\n      targetPort: 5432\\n  selector:\\n      type: db\\n      endpoint: crawler-cryptocurrency-app\\n      function: crawler\\n      data: cryptocurrency\\n  loadBalancerIP: {{ postgres_public_ip }}\\n  loadBalancerSourceRanges:\\n    {%- for ip in firewall_ips %}\\n      - {{ip}}\\n    {%- endfor %}\\n&#x27;"}, {"fullname": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources.deployment_postgres", "modulename": "pumpwood_deploy.crawlers.cryptocurrency.resources.yml__resources", "qualname": "deployment_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-crawler-cryptocurrency\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n        type: db\\n        endpoint: crawler-cryptocurrency-app\\n        function: crawler\\n        data: cryptocurrency\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: crawler-cryptocurrency-app\\n        function: crawler\\n        data: cryptocurrency\\n    spec:\\n      volumes:\\n      - name: crawler-cryptocurrency-data\\n        persistentVolumeClaim:\\n          claimName: postgres-crawler-cryptocurrency\\n      - name: secrets\\n        secret:\\n          secretName: crawler-cryptocurrency\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: postgres-test-bouncer\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: postgis/postgis:15-3.3-alpine\\n        args: [\\n            &quot;-c&quot;, &quot;max_connections=1000&quot;,\\n            &quot;-c&quot;, &quot;work_mem=50MB&quot;,\\n            &quot;-c&quot;, &quot;shared_buffers=1GB&quot;,\\n            &quot;-c&quot;, &quot;max_locks_per_transaction=500&quot;,\\n            &quot;-c&quot;, &quot;max_wal_size=10GB&quot;,\\n            &quot;-c&quot;, &quot;min_wal_size=80MB&quot;]\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        env:\\n        - name: POSTGRES_USER\\n          value: pumpwood\\n        - name: POSTGRES_DB\\n          value: pumpwood\\n        - name: POSTGRES_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: crawler-cryptocurrency\\n              key: db_password\\n        - name: PGDATA\\n          value: /var/lib/postgresql/data/pgdata\\n\\n        volumeMounts:\\n        - name: crawler-cryptocurrency-data\\n          mountPath: /var/lib/postgresql/data/\\n        - name: secrets\\n          mountPath: /etc/secrets\\n          readOnly: true\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-crawler-cryptocurrency\\n  labels:\\n    type: db\\n    endpoint: crawler-cryptocurrency-app\\n    function: crawler\\n    data: cryptocurrency\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: crawler-cryptocurrency-app\\n    function: crawler\\n    data: cryptocurrency\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-crawler-cryptocurrency-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: crawler-cryptocurrency-app\\n    function: crawler\\n    data: cryptocurrency\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 5432\\n  selector:\\n    type: db\\n    endpoint: crawler-cryptocurrency-app\\n    function: crawler\\n    data: cryptocurrency\\n&#x27;"}, {"fullname": "pumpwood_deploy.deploy", "modulename": "pumpwood_deploy.deploy", "kind": "module", "doc": "<p>Pumpwood Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood", "kind": "class", "doc": "<p>Class to perform PumpWood Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.__init__", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_password [str]:</strong>  Password of models microservice.</li>\n<li><strong>rabbitmq_secret [str]:</strong>  Password associated with RabbitMQ user.</li>\n<li><strong>hash_salt [str]:</strong>  Salt for hashs in deployment.</li>\n<li><strong>cluster_zone [str]:</strong>  Kubernets cluster zone.</li>\n<li><strong>cluster_project [str]:</strong>  Kubernets project name.</li>\n<li><strong>k8_provider [str]:</strong>  Kubernets provider, so far must be in <code>['gcp', 'azure',\n'aws']</code>.</li>\n<li><strong>k8_deploy_args [dict]:</strong>  Arguments to deploy k8s cluster it may\nvary depending on the provider. Check classes\n<code>KubernetsGCP</code>, <code>KubernetsAzure</code> and <code>KubernetsAWS</code>.</li>\n<li><strong>kong_db_disk_name [str]:</strong>  Name of the disk for Postgres associated with Kong service\nmesh.</li>\n<li><strong>kong_db_disk_size [str]:</strong>  Size of the disk that will be attached to Kong Postgres.</li>\n<li><strong>storage_type [str]:</strong>  Storage provider must be in <code>['azure_storage', 'google_bucket',\n'aws_s3']</code>, correpond to the provider os the flat file\nstorage system.</li>\n<li><p><strong>storage_deploy_args [str]:</strong>  Args used to access storage at the\npods. Each provider must have diferent arguments:<br>\n<strong>Azure:</strong></p>\n\n<ul>\n<li>storage_connection_string: Set conenction string to\na blob storage.</li>\n</ul>\n\n<p><strong>GCP:</strong> <br></p>\n\n<ul>\n<li>credential_file: Set a path to a credetial file of a service\nuser with access to the bucket that will be used at the\ndeployment.</li>\n</ul>\n\n<p><strong>AWS:</strong> <br></p>\n\n<ul>\n<li>aws_access_key_id: Access key of the service user with\naccess to the s3 used in deployment.</li>\n<li>aws_secret_access_key: Access secret of the service user with\naccess to the s3 used in deployment.</li>\n</ul></li>\n<li><strong>k8_namespace [str]:</strong>  Which namespace to deploy the system.</li>\n<li><strong>gateway_health_url [url]:</strong>  Health check url that will be used. Usually it is good to\nset health check of auth microservice since it has a mandatory\ndeploy for Pumpwood.</li>\n<li><strong>kong_repository [str]:</strong>  Kong service mesh custom image repository.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_user_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">rabbitmq_secret</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">hash_salt</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kong_db_disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kong_db_disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">k8_provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">k8_deploy_args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">storage_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">storage_deploy_args</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">k8_namespace</span><span class=\"o\">=</span><span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gateway_health_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;health-check/pumpwood-auth-app/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kong_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.kube_client", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.kube_client", "kind": "variable", "doc": "<p>Kubernets client reposible for creation of discs acording to provider\nand other vendor specific operations.</p>\n", "annotation": ": pumpwood_deploy.kubernets.kubernets.Kubernets"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.namespace", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.namespace", "kind": "variable", "doc": "<p>Name space that will be used to deploy Pumpwood.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.microsservices_to_deploy", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.microsservices_to_deploy", "kind": "variable", "doc": "<p>List of microservice objects that will be used to deploy de\napplication.</p>\n", "annotation": ": List"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.base_path", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.base_path", "kind": "variable", "doc": "<p>Base path that will be used to create manifest file and bash scripts.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.deploy", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.deploy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.add_microservice", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.add_microservice", "kind": "function", "doc": "<p>Add microservice to deploy stack.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice [Microservice object]:</strong>  A microservice object to be added to deployment stack.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">microservice</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.create_deploy_files", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.create_deploy_files", "kind": "function", "doc": "<p>Create all deployment manifests and scripts.</p>\n\n<p>Interate over <code>microsservices_to_deploy</code> creating deploy files at\n<code>./outputs/</code> folder.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.deploy.DeployPumpWood.deploy_microservices", "modulename": "pumpwood_deploy.deploy", "qualname": "DeployPumpWood.deploy_microservices", "kind": "function", "doc": "<p>Create deploy files and apply them to de cluster.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.ingress", "modulename": "pumpwood_deploy.ingress", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws", "modulename": "pumpwood_deploy.ingress.aws", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy", "modulename": "pumpwood_deploy.ingress.aws.deploy", "kind": "module", "doc": "<p>Create AWS Aplication LoadBalancer Ingress.</p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.aws_alb_ingress_host", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "aws_alb_ingress_host", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: networking.k8s.io/v1\\nkind: Ingress\\nmetadata:\\n  name: alb-ingress\\n  annotations:\\n    kubernetes.io/ingress.class: alb\\n    alb.ingress.kubernetes.io/load-balancer-name: \\&#x27;{{ alb_name }}\\&#x27;\\n    alb.ingress.kubernetes.io/group.name: \\&#x27;{{ group_name }}\\&#x27;\\n    alb.ingress.kubernetes.io/ip-address-type: ipv4\\n    alb.ingress.kubernetes.io/scheme: internal\\n    alb.ingress.kubernetes.io/target-type: ip\\n    alb.ingress.kubernetes.io/listen-ports: \\&#x27;[{&quot;HTTP&quot;: 80}, {&quot;HTTPS&quot;: 443}]\\&#x27;\\n    alb.ingress.kubernetes.io/ssl-redirect: \\&#x27;443\\&#x27;\\n    alb.ingress.kubernetes.io/healthcheck-path: {{ health_check_url }}\\n    alb.ingress.kubernetes.io/certificate-arn: {{ certificate_arn }}\\nspec:\\n  rules:\\n  - host: {{ host }}\\n    http:\\n      paths:\\n      - pathType: Prefix\\n        path: {{ path }}\\n        backend:\\n          service:\\n            name: {{ service_name }}\\n            port:\\n              number: {{ service_port }}\\n&#x27;"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.aws_alb_ingress_path", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "aws_alb_ingress_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: networking.k8s.io/v1\\nkind: Ingress\\nmetadata:\\n  name: alb-ingress\\n  annotations:\\n    kubernetes.io/ingress.class: alb\\n    alb.ingress.kubernetes.io/load-balancer-name: \\&#x27;{{ alb_name }}\\&#x27;\\n    alb.ingress.kubernetes.io/group.name: \\&#x27;{{ group_name }}\\&#x27;\\n    alb.ingress.kubernetes.io/ip-address-type: ipv4\\n    alb.ingress.kubernetes.io/scheme: internal\\n    alb.ingress.kubernetes.io/target-type: ip\\n    alb.ingress.kubernetes.io/listen-ports: \\&#x27;[{&quot;HTTP&quot;: 80}, {&quot;HTTPS&quot;: 443}]\\&#x27;\\n    alb.ingress.kubernetes.io/ssl-redirect: \\&#x27;443\\&#x27;\\n    alb.ingress.kubernetes.io/healthcheck-path: {{ health_check_url }}\\n    alb.ingress.kubernetes.io/certificate-arn: {{ certificate_arn }}\\nspec:\\n  rules:\\n  - http:\\n      paths:\\n      - pathType: Prefix\\n        path: {{ path }}\\n        backend:\\n          service:\\n            name: {{ service_name }}\\n            port:\\n              number: {{ service_port }}\\n&#x27;"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.aws_nlb_healthcheck", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "aws_nlb_healthcheck", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Namespace\\nmetadata:\\n  name: healthcheck\\n  labels:\\n    name: healthcheck\\n---\\nkind: Pod\\napiVersion: v1\\nmetadata:\\n  name: healthcheck-app\\n  namespace: healthcheck\\n  labels:\\n    app: healthcheck\\nspec:\\n  containers:\\n    - name: healthcheck-app\\n      image: andrebaceti/k8s-health-check-container:0.1\\n      ports:\\n        - containerPort: 80\\n      env:\\n      - name: HEALTH_CHECK_PATH\\n        value: &quot;k8s-health-check/&quot;\\n---\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  name: healthcheck-service\\n  namespace: healthcheck\\nspec:\\n  selector:\\n    app: healthcheck\\n  ports:\\n    - port: 80\\n&#x27;"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.aws_nlb_healthcheck_ingress", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "aws_nlb_healthcheck_ingress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: networking.k8s.io/v1\\nkind: Ingress\\nmetadata:\\n  name: alb-ingress-v3\\n  namespace: healthcheck\\n  annotations:\\n    kubernetes.io/ingress.class: alb\\n    alb.ingress.kubernetes.io/load-balancer-name: \\&#x27;{{ alb_name }}\\&#x27;\\n    alb.ingress.kubernetes.io/group.name: \\&#x27;{{ group_name }}\\&#x27;\\n    alb.ingress.kubernetes.io/ip-address-type: ipv4\\n    alb.ingress.kubernetes.io/scheme: internal\\n    alb.ingress.kubernetes.io/target-type: ip\\n    alb.ingress.kubernetes.io/listen-ports: \\&#x27;[{&quot;HTTPS&quot;: 443}]\\&#x27;\\n    alb.ingress.kubernetes.io/healthcheck-path: \\&#x27;/k8s-health-check/\\&#x27;\\n    alb.ingress.kubernetes.io/certificate-arn: {{ certificate_arn }}\\nspec:\\n  rules:\\n  - http:\\n      paths:\\n      - pathType: Prefix\\n        path: &quot;/k8s-health-check/&quot;\\n        backend:\\n          service:\\n            name: healthcheck-service\\n            port:\\n              number: 80\\n&#x27;"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.IngressALB", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "IngressALB", "kind": "class", "doc": "<p>Create an AWS Aplication LoadBalancer Ingress.</p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.IngressALB.__init__", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "IngressALB.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<p>Constructor of IngressALB class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>alb_name [str]:</strong>  Name of the Aplication LoadBalancer that will be\ncreated on AWS.</li>\n<li><strong>group_name [str]:</strong>  Name of the group used on AWS Aplication\nLoadBalancer.</li>\n<li><strong>health_check_url [str]:</strong>  Health check URL.</li>\n<li><strong>certificate_arn [str]:</strong>  Certificate ARN.</li>\n<li><strong>service_name [str]:</strong>  K8s service name.</li>\n<li>service_port [int] K8s service port.</li>\n</ul>\n\n<h6 id=\"kargs\">Kargs:</h6>\n\n<blockquote>\n  <p>host = None [str]: Host to redirect calls to service backend, this\n      can be used to redirect sub-domains to especifct namespaces\n      or services. Ex.: dev.mysite.com, client1.mysite.com.\n  path = \"/\" [str]: Path to be used to redirect calls to service.\n  service_name [str] = \"apigateway-nginx\": Service to redirect calls,\n      apigateway-nginx is the default name of the CORSTerminaton\n      service.\n  service_port [int] = 80: Post used by {service_name}. 80 is the\n      default port for CORSTerminaton.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alb_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">group_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">certificate_arn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">health_check_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/health-check/pumpwood-auth-app/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;apigateway-nginx&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">service_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>,</span><span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.IngressALB.base_path", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "IngressALB.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.deploy.IngressALB.create_deployment_file", "modulename": "pumpwood_deploy.ingress.aws.deploy", "qualname": "IngressALB.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n\n<p>No args</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.ingress.aws.resources", "modulename": "pumpwood_deploy.ingress.aws.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.tests", "modulename": "pumpwood_deploy.ingress.aws.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.tests.test__IngressALB", "modulename": "pumpwood_deploy.ingress.aws.tests.test__IngressALB", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.ingress.aws.tests.test__IngressALB.TestIngressALB", "modulename": "pumpwood_deploy.ingress.aws.tests.test__IngressALB", "qualname": "TestIngressALB", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.ingress.aws.tests.test__IngressALB.TestIngressALB.load_balancer_address", "modulename": "pumpwood_deploy.ingress.aws.tests.test__IngressALB", "qualname": "TestIngressALB.load_balancer_address", "kind": "variable", "doc": "<p>Ip of the load balancer</p>\n", "default_value": "&#x27;http://0.0.0.0:8080/&#x27;"}, {"fullname": "pumpwood_deploy.ingress.aws.tests.test__IngressALB.TestIngressALB.apps_to_regenerate", "modulename": "pumpwood_deploy.ingress.aws.tests.test__IngressALB", "qualname": "TestIngressALB.apps_to_regenerate", "kind": "variable", "doc": "<p>Name of the apps to be regenerated after the test is over</p>\n", "default_value": "[&#x27;pumpwood-auth-app&#x27;]"}, {"fullname": "pumpwood_deploy.ingress.aws.tests.test__IngressALB.TestIngressALB.test__create_files", "modulename": "pumpwood_deploy.ingress.aws.tests.test__IngressALB", "qualname": "TestIngressALB.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.kubernets", "modulename": "pumpwood_deploy.kubernets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.kubernets.bash_templates", "modulename": "pumpwood_deploy.kubernets.bash_templates", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets", "modulename": "pumpwood_deploy.kubernets.kubernets", "kind": "module", "doc": "<p>Interface with kubernets.</p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets", "kind": "class", "doc": "<p>Class to auxiliate kubernets interface.</p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.__init__", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cluster_name [str]:</strong>  Kubernets cluster name.</li>\n<li><strong>k8_provider [str]:</strong>  Provider name.</li>\n<li><strong>k8_deploy_args [dict]:</strong>  Arguments to deploy k8s cluster.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">k8_provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">k8_deploy_args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">k8_namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.k8_namespace", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.k8_namespace", "kind": "variable", "doc": "<p>Namespace that will be used to deploy Pumpwood.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.k8_deploy_args", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.k8_deploy_args", "kind": "variable", "doc": "<p>Arguments that will be used on deploy of the pods, it will be passed as\n<code>**k8_deploy_args</code> to <code>KubernetsGCP</code>, <code>KubernetsAzure</code> or\n<code>KubernetsAWS</code>.</p>\n", "annotation": ": dict"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.k8_provider", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.k8_provider", "kind": "variable", "doc": "<p>K8s provider, possible values ['gcp', 'azure', 'aws'].</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.kube_client", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.kube_client", "kind": "variable", "doc": "<p>Object of the corresponding K8s class associated with <code>k8_provider</code>.</p>\n", "annotation": ": object"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.create_volume_yml", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.create_volume_yml", "kind": "function", "doc": "<p>Create volume yml using provider and k8_deploy_args.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>disk_name [str]:</strong>  Disk name at the provider.</li>\n<li><strong>disk_size [str]:</strong>  Size of the disk that will be mapped to K8s\ncluster.</li>\n<li><strong>volume_claim_name [str]:</strong>  Name of the volume claim.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the yml content of the deploy file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">volume_claim_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.Kubernets.run_deploy_commmands", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "Kubernets.run_deploy_commmands", "kind": "function", "doc": "<p>Deploy commands.</p>\n\n<p>Create bash files to apply manifests to k8s cluster and run them. It is\nset a sleep time after each deployment, permiting finishing of cluster\nchanges before move on.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cmds [List[dict]]:</strong>  List of commands to be applied at the k8s cluster.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  'Command not implemented: %s'. Indicates that command\nassociated with deploy was not implemented yet. So far,\nonly <code>run</code> was implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmds</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsGCP", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsGCP", "kind": "class", "doc": "<p>Class to auxiliate GCP Kubernets interface.</p>\n\n<p>This class will help creation of disks and cluster conenction, creating\na default API for all providers.</p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsGCP.__init__", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsGCP.__init__", "kind": "function", "doc": "<p>Create a KubernetsGCP object.</p>\n\n<p>Constructor will create object and connect to k8s cluster using\nkubectl.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cluster_name [str]:</strong>  Kubernets cluster name that will be connected and will\nreceive the K8s manifest application.</li>\n<li><strong>zone [str]:</strong>  Zone location of the cluster.</li>\n<li><strong>project [str]:</strong>  Google project name.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  '!! Error loging to k8s cluster, check logs !!'. Indicates\nthat it was not possible to connect with k8s cluster using\narguments passed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">project</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsGCP.cluster_name", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsGCP.cluster_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsGCP.zone", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsGCP.zone", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsGCP.project", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsGCP.project", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsGCP.create_volume_yml", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsGCP.create_volume_yml", "kind": "function", "doc": "<p>Create volume yml using provider and k8_deploy_args.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>disk_name [str]:</strong>  Disk name at the provider.</li>\n<li><strong>disk_size [str]:</strong>  Size of the disk that will be mapped to K8s\ncluster.</li>\n<li><strong>volume_claim_name [str]:</strong>  Name of the volume claim.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the yml manifest content of the deploy file to created\n  perissistent volumes on GCP.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">volume_claim_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure", "kind": "class", "doc": "<p>Class to auxiliate Azure AKS Kubernets interface.</p>\n\n<p>This class will help creation of disks and cluster conenction, creating\na default API for all providers.</p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure.__init__", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure.__init__", "kind": "function", "doc": "<p>Create a KubernetsAzure object.</p>\n\n<p>Constructor will create object and connect to k8s cluster using\nkubectl.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>subscription [str]:</strong>  Azure subscription ID, something like\nXXXXXXXX-XXXX-XXXX-XXXX-53b44c8776b0.</li>\n<li><strong>resource_group [str]:</strong>  Resorce group name used to deploy in k8s cluster. It is not\nthe resource group created by k8s do deploy cluster\ncomponents.</li>\n<li><strong>k8s_resource_group [str]:</strong>  Resorce group created by k8s cluster to deploy cluster\ncomponents.</li>\n<li><strong>aks_resource [str]:</strong>  Name of the K8s resource.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  '!! Error loging to k8s cluster, check logs !!'. Indicates that\nit was not possible to connect with k8s cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">subscription</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">resource_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">k8s_resource_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">aks_resource</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure.subscription", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure.subscription", "kind": "variable", "doc": "<p>Azure subscription.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure.resource_group", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure.resource_group", "kind": "variable", "doc": "<p>Resorce group used in k8s cluster.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure.k8s_resource_group", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure.k8s_resource_group", "kind": "variable", "doc": "<p>Resorce group created by k8s cluster to deploy cluster components.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure.aks_resource", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure.aks_resource", "kind": "variable", "doc": "<p>Name of the K8s resource.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAzure.create_volume_yml", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAzure.create_volume_yml", "kind": "function", "doc": "<p>Create volume yml using provider and k8_deploy_args.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>disk_name [str]:</strong>  Disk name at the provider.</li>\n<li><strong>disk_size [str]:</strong>  Size of the disk that will be mapped to K8s\ncluster.</li>\n<li><strong>volume_claim_name [str]:</strong>  Name of the volume claim.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the yml content of the deploy file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">volume_claim_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAWS", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAWS", "kind": "class", "doc": "<p>Class to auxiliate AWS EKS Kubernets interface.</p>\n\n<p>This class will help creation of disks and cluster conenction, creating\na default API for all providers.</p>\n"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAWS.__init__", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAWS.__init__", "kind": "function", "doc": "<p>Create a KubernetsAWS object.</p>\n\n<p>Constructor will create object and connect to k8s cluster using\nkubectl.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>region [str]:</strong>  EKS AWS Region.</li>\n<li><strong>cluster_name [str]:</strong>  EKS cluster name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAWS.region", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAWS.region", "kind": "variable", "doc": "<p>Region associated with K8s cluster.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAWS.cluster_name", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAWS.cluster_name", "kind": "variable", "doc": "<p>K8s cluster name.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_deploy.kubernets.kubernets.KubernetsAWS.create_volume_yml", "modulename": "pumpwood_deploy.kubernets.kubernets", "qualname": "KubernetsAWS.create_volume_yml", "kind": "function", "doc": "<p>Create volume yml using provider and k8_deploy_args.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>disk_name [str]:</strong>  Disk name at the provider.</li>\n<li><strong>disk_size [str]:</strong>  Size of the disk that will be mapped to K8s\ncluster.</li>\n<li><strong>volume_claim_name [str]:</strong>  Name of the volume claim.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the yml content of the deploy file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">volume_claim_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.kubernets.resources", "modulename": "pumpwood_deploy.kubernets.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase", "modulename": "pumpwood_deploy.metabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy", "modulename": "pumpwood_deploy.metabase.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.secrets", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: metabase\\ntype: Opaque\\ndata:\\n  db_usename: {db_usename}\\n  db_password: {db_password}\\n  embedding_secret_key: {embedding_secret_key}\\n  encryption_secret_key: {encryption_secret_key}\\n&#x27;"}, {"fullname": "pumpwood_deploy.metabase.deploy.app_deployment", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: metabase-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: metabase-app\\n      function: dashboard\\n  template:\\n    metadata:\\n      labels:\\n          type: app\\n          endpoint: metabase-app\\n          function: dashboard\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: metabase\\n        image: andrebaceti/metabase-pumpwood:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: api/health\\n            port: 3000\\n        ports:\\n        - containerPort: 3000\\n        env:\\n        ############\\n        # Metabase #\\n        - name: MB_SITE_URL\\n          valueFrom:\\n            configMapKeyRef:\\n              name: metabase\\n              key: site_url\\n        - name: MB_EMBEDDING_SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: metabase\\n              key: embedding_secret_key\\n        - name: MB_ENCRYPTION_SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: metabase\\n              key: encryption_secret_key\\n\\n        ############\\n        # Database #\\n        - name: JAVA_OPTS\\n          value: &quot;{java_opts}&quot;\\n        - name: MB_CHECK_FOR_UPDATES\\n          value: &quot;false&quot;\\n        - name: MB_DB_TYPE\\n          value: &quot;postgres&quot;\\n        - name: MB_DB_DBNAME\\n          value: &quot;{db_database}&quot;\\n        - name: MB_DB_PORT\\n          value: &quot;5432&quot;\\n        - name: MB_DB_HOST\\n          value: {db_host}\\n        - name: MB_AGGREGATED_QUERY_ROW_LIMIT\\n          value: &quot;{aggregated_query_row_limit}&quot;\\n        - name: MB_UNAGGREGATED_QUERY_ROW_LIMIT\\n          value: &quot;{unaggregated_query_row_limit}&quot;\\n        - name: MB_DB_USER\\n          valueFrom:\\n            secretKeyRef:\\n              name: metabase\\n              key: db_usename\\n        - name: MB_DB_PASS\\n          valueFrom:\\n            secretKeyRef:\\n              name: metabase\\n              key: db_password\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: metabase-app\\n  labels:\\n      type: app\\n      endpoint: metabase-app\\n      function: dashboard\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 3000\\n      targetPort: 3000\\n  selector:\\n      type: app\\n      endpoint: metabase-app\\n      function: dashboard\\n&#x27;"}, {"fullname": "pumpwood_deploy.metabase.deploy.config_map", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "config_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: metabase\\ndata:\\n  site_url: &quot;{site_url}&quot;\\n&#x27;"}, {"fullname": "pumpwood_deploy.metabase.deploy.test_postgres", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-metabase\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: metabase-app\\n      function: dashboard\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: metabase-app\\n        function: dashboard\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: postgres-metabase\\n        image: {repository}/test-db-metabase:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-metabase:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-metabase\\n  labels:\\n    type: db\\n    endpoint: metabase-app\\n    function: dashboard\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: metabase-app\\n    function: dashboard\\n&#x27;"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice", "kind": "class", "doc": "<p>Deploy Metabase as microservice.</p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.__init__", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password (str):</strong>  Password for database.</li>\n<li><strong>metabase_site_url (str):</strong>  Site url to be used in dashboard\nembedding.</li>\n<li><strong>embedding_secret_key (str):</strong>  Secret to be used to embedding\ngraphs using metabase.</li>\n<li><strong>encryption_secret_key (str):</strong>  Secret key for Metabase internal\nencription.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>db_host (str): Host to connect to postgres database for metabase.\n  disk_name (str): Disk name to store metabase information,\n  disk_size (str): Disk size to store metabase information,\n  test_db_version (str): Set a test database with version.\n  test_db_repository (str): Define a repository for the test\n    database.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MetabaseMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.deployment_postgres_text_f</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metabase_site_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">embedding_secret_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">encryption_secret_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_usename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;metabase&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-metabase&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;metabase&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;v0.48.6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;6Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_java_opts</span><span class=\"o\">=</span><span class=\"s1\">&#39;-Xmx5g&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">aggregated_query_row_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">unaggregated_query_row_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span></span>)</span>"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.db_host", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.db_database", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.db_port", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.base_path", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_version", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_replicas", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.app_java_opts", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.app_java_opts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.metabase_site_url", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.metabase_site_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.aggregated_query_row_limit", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.aggregated_query_row_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.unaggregated_query_row_limit", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.unaggregated_query_row_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.embedding_secret_key", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.embedding_secret_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.encryption_secret_key", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.encryption_secret_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.test_db_version", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.test_db_repository", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.metabase.deploy.MetabaseMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.metabase.deploy", "qualname": "MetabaseMicroservice.create_deployment_file", "kind": "function", "doc": "<p>create_deployment_file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.metabase.resources", "modulename": "pumpwood_deploy.metabase.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices", "modulename": "pumpwood_deploy.microservices", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway", "modulename": "pumpwood_deploy.microservices.api_gateway", "kind": "module", "doc": "<p>Deployment of Api Gateway Microservices.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "kind": "module", "doc": "<p>load_balancer.py.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.nginx_gateway_deployment", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "nginx_gateway_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: apigateway-nginx\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: apigateway-nginx\\n  template:\\n    metadata:\\n      labels:\\n        type: apigateway-nginx\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: apigateway-nginx\\n        image: {repository}/pumpwood-nginx-ssl-gateway:{nginx_ssl_version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        readinessProbe:\\n          httpGet:\\n            path: {health_check_url}\\n            port: 80\\n        ports:\\n        # Consumers Ports\\n        - containerPort: 80\\n        env:\\n        - name: SERVER_NAME\\n          value: &quot;{server_name}&quot;\\n        - name: EMAIL\\n          value: &quot;{email_contact}&quot;\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.nginx_gateway_no_ssl_deployment", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "nginx_gateway_no_ssl_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: apigateway-nginx-no-ssl\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: apigateway-nginx\\n  template:\\n    metadata:\\n      labels:\\n        type: apigateway-nginx\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: apigateway-nginx-no-ssl\\n        image: {repository}/pumpwood-nginx-without-ssl:{nginx_ssl_version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        readinessProbe:\\n          httpGet:\\n            path: {health_check_url}\\n            port: 80\\n        env:\\n        - name: NGINX_PORT\\n          value: &quot;80&quot;\\n        - name: SERVER_NAME\\n          value: &quot;{server_name}&quot;\\n        - name: TARGET_SERVICE\\n          value: &quot;{target_service}&quot;\\n        - name: TARGET_HEALTH\\n          value: &quot;{target_health}&quot;\\n        ports:\\n        # Consumers Ports\\n        - containerPort: 80\\n\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: apigateway-nginx\\n  labels:\\n    type: apigateway\\n    destination: cluster\\nspec:\\n  type: ClusterIP\\n  selector:\\n    type: apigateway-nginx\\n  ports:\\n    - name: http\\n      port: 80\\n      targetPort: 80\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.nginx_gateway_secrets_deployment", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "nginx_gateway_secrets_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: apigateway-nginx-secrets\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: apigateway-nginx\\n  template:\\n    metadata:\\n      labels:\\n        type: apigateway-nginx\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: ssl-credentials-key\\n        secret:\\n          secretName: ssl-credentials-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: apigateway-nginx\\n        image: {repository}/pumpwood-nginx-ssl-secrets-gateway:{nginx_ssl_version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: ssl-credentials-key\\n            readOnly: true\\n            mountPath: /credentials/\\n        readinessProbe:\\n          httpGet:\\n            path: {health_check_url}\\n            port: 80\\n        ports:\\n        # Consumers Ports\\n        - containerPort: 80\\n        env:\\n        - name: SERVER_NAME\\n          value: &quot;{server_name}&quot;\\n        - name: GOOGLE_PROJECT_ID\\n          value: &quot;{google_project_id}&quot;\\n        - name: SECRET_ID\\n          value: &quot;{secret_id}&quot;\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.external_service", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "external_service", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: apigateway-nginx\\n  labels:\\n    type: apigateway\\n    destination: external\\nspec:\\n  type: LoadBalancer\\n  selector:\\n    type: apigateway-nginx\\n  ports:\\n    - name: https\\n      port: 443\\n      targetPort: 443\\n    - name: http\\n      port: 80\\n      targetPort: 80\\n  loadBalancerIP: {{ public_ip }}\\n  loadBalancerSourceRanges:\\n    {%- for ip in firewall_ips %}\\n      - {{ip}}\\n    {%- endfor %}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.internal_service", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "internal_service", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: apigateway-nginx\\n  annotations:\\n      networking.gke.io/load-balancer-type: &quot;Internal&quot;\\n  labels:\\n    type: apigateway\\n    destination: external\\nspec:\\n  type: LoadBalancer\\n  selector:\\n    type: apigateway-nginx\\n  ports:\\n    - name: https\\n      port: 443\\n      targetPort: 443\\n    - name: http\\n      port: 80\\n      targetPort: 80\\n  loadBalancerIP: {public_ip}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot", "kind": "class", "doc": "<p>Build deployment files for the NGINX Api Gateway with Certbot.</p>\n\n<p>API gateway will set CORS and other security headers for all\napplication.</p>\n\n<p>Api Gateway Certbot will also add a https termination\nto application using Let's encript to generate a certificate\nassociated with DNS name.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.__init__", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gateway_public_ip [str]:</strong>  Set the IP for the ApiGateway, when using\nAWS Elastic IP it must be passed it's id. It must have one\nElastic IP for each public subnet on VPC used on K8s, values\nmust be separated using coma, ex:\n    - \"eipalloc-XXXXXX,eipalloc-YYYYY\"</li>\n<li><strong>email_contact [str]:</strong>  E-mail contact for let's encript.</li>\n<li><strong>version [str]:</strong>  Version of the API gateway.</li>\n<li><strong>server_name [str]:</strong>  DNS name for the server.</li>\n<li><strong>health_check_url [str]:</strong>  Url for the health checks.</li>\n<li><strong>souce_ranges [List[str]]:</strong>  List of the IPs to restrict source\nconections to the ApiGateway. By default is 0.0.0.0/0, no\nrestriction.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gateway_public_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email_contact</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">health_check_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;health-check/pumpwood-auth-app/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">server_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;not_set&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">souce_ranges</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;0.0.0.0/0&#39;</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.repository", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.gateway_public_ip", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.gateway_public_ip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.server_name", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.server_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.email_contact", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.email_contact", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.version", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.health_check_url", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.health_check_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.souce_ranges", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.souce_ranges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.base_path", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCertbot.create_deployment_file", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCertbot.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton", "kind": "class", "doc": "<p>Create a NGINX termination to add default CORS headers.</p>\n\n<p>This API Gateway will only add CORS and security headers to application,\nbut it will not add HTTPs termination to aplication.</p>\n\n<p>To add HTTPs, set a upstrem HTTPs termination using cloud vendor\nloadbalancer.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.__init__", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.__init__", "kind": "function", "doc": "<p>Build deployment files for the Kong ApiGateway.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>version (str):</strong>  Version of the API gateway.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>health_check_url (str): Url for the health checks.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">health_check_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;health-check/pumpwood-auth-app/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">server_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;localhost&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">target_service</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;load-balancer:8000&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">target_health</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;load-balancer:8001&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.repository", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.version", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.health_check_url", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.health_check_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.server_name", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.server_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.target_service", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.target_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.target_health", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.target_health", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.base_path", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.api_gateway.deploy.ApiGatewayCORSTerminaton.create_deployment_file", "modulename": "pumpwood_deploy.microservices.api_gateway.deploy", "qualname": "ApiGatewayCORSTerminaton.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n\n<p>No args.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.frontend", "modulename": "pumpwood_deploy.microservices.frontend", "kind": "module", "doc": "<p>Deployment of Front-End Microservices.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "kind": "module", "doc": "<p>Class to deploy Frontend Microservices.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.deployment_yml", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "deployment_yml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-frontend-react\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: frontend\\n      function: pumpwood-default\\n  template:\\n    metadata:\\n      labels:\\n        type: frontend\\n        function: pumpwood-default\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-frontend-react\\n        image: {repository}/pumpwood-frontend-react:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: NEXT_PUBLIC_APP_API_HOST\\n          value: \\&#x27;{gateway_public_ip}\\&#x27;\\n        - name: DEBUG\\n          value: \\&#x27;{debug}\\&#x27;\\n\\n        # Microservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-frontend-react\\n              key: microservice_password\\n\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-frontend-react\\n  labels:\\n    type: frontend\\n    function: pumpwood-default\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: frontend\\n    function: pumpwood-default\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.secrets_yml", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "secrets_yml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-frontend-react\\ntype: Opaque\\ndata:\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice", "kind": "class", "doc": "<p>Deploy Pumpwood Main front-end microservices.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.__init__", "kind": "function", "doc": "<p>Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>version [str]:</strong>  Version of the front-end microservice.</li>\n<li><strong>gateway_public_ip [str]:</strong>  Address for the API gateway. It should be the IP or\nthe DNS name for the application, it will be used to correct\nredirect request to end-point.</li>\n<li><strong>microservice_password [str]:</strong>  Microservice service user password that will be used to log\nat Pumpwood and register routes and services. Service\nuser default name is <code>microservice--frontend</code>.</li>\n<li><strong>debug [str]:</strong>  Set if frontend is in debug mode or not. User 'TRUE'/'FALSE'\nstrings to set this option.</li>\n<li><strong>repository [str]:</strong>  Repository from which the docker image\n<code>pumpwood-frontend-react</code> will be fetched.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gateway_public_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;microservice--frontend&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.repository", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.version", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.gateway_public_ip", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.gateway_public_ip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.debug", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.frontend.deploy.PumpwoodFrontEndMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.frontend.deploy", "qualname": "PumpwoodFrontEndMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.postgres.config_files", "modulename": "pumpwood_deploy.microservices.postgres.config_files", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "kind": "module", "doc": "<p>Deploy Postgres.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.pgbouncer_deploy", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "pgbouncer_deploy", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: {name}\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: {name}\\n      function: pgbouncer\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: {name}\\n        function: pgbouncer\\n    spec:\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: andrebaceti/pgbouncer-auto-bootstrap:1.21.0-1.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          valueFrom:\\n            secretKeyRef:\\n              name: {postgres_secret}\\n              key: db_username\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: {postgres_secret}\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: \\&#x27;{host}\\&#x27;\\n        - name: POSTGRESQL_PORT\\n          value: \\&#x27;{port}\\&#x27;\\n        - name: PGBOUNCER_DATABASE\\n          value: \\&#x27;{database}\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: {name}\\n  labels:\\n    type: db\\n    endpoint: {name}\\n    function: pgbouncer\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: {name}\\n    function: pgbouncer\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.deployment_postgres", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "deployment_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: {name}\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: {name}\\n      function: postgres\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: {name}\\n        function: postgres\\n    spec:\\n      volumes:\\n      - name: postgres-data\\n        persistentVolumeClaim:\\n          claimName: {volume_claim_name}\\n      - name: secrets\\n        secret:\\n          secretName: {name}\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # Postgres Container\\n      - name: postgres\\n        image: postgis/postgis:15-3.3-alpine\\n        args: [\\n            &quot;-c&quot;, &quot;max_connections=1000&quot;,\\n            &quot;-c&quot;, &quot;work_mem=50MB&quot;,\\n            &quot;-c&quot;, &quot;shared_buffers=1GB&quot;,\\n            &quot;-c&quot;, &quot;max_locks_per_transaction=500&quot;,\\n            &quot;-c&quot;, &quot;max_wal_size=10GB&quot;,\\n            &quot;-c&quot;, &quot;min_wal_size=80MB&quot;]\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        env:\\n        - name: POSTGRES_USER\\n          valueFrom:\\n            secretKeyRef:\\n              name: {name}\\n              key: db_username\\n        - name: POSTGRES_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: {name}\\n              key: db_password\\n        - name: PGDATA\\n          value: /var/lib/postgresql/data/pgdata\\n        volumeMounts:\\n        - name: postgres-data\\n          mountPath: /var/lib/postgresql/data/\\n        - name: secrets\\n          mountPath: /etc/secrets\\n          readOnly: true\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: {name}\\n  labels:\\n    type: db\\n    endpoint: {name}\\n    function: postgres\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 5432\\n  selector:\\n    type: db\\n    endpoint: {name}\\n    function: postgres\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.secrets_postgres", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "secrets_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: {name}\\ntype: Opaque\\ndata:\\n  db_username: {db_username}\\n  db_password: {db_password}\\n  ssl_key: {ssl_key}\\n  ssl_crt: {ssl_crt}\\n---\\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: {name}-ssl-keys\\ntype: Opaque\\ndata:\\n  ssl_key: {ssl_key}\\n  ssl_crt: {ssl_crt}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase", "kind": "class", "doc": "<p>PumpWoodAuthMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.__init__", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.__init__", "kind": "function", "doc": "<p>Deploy a postgres server not associated with other microservices.</p>\n\n<p>Username is \"pumpwood\" and password is set as parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password [str]:</strong>  Database password.</li>\n<li><strong>disk_size [str]:</strong>  Size of the disk to be claimed.</li>\n<li><strong>disk_name [str]:</strong>  Disk name.</li>\n<li><strong>name [str]:</strong>  Service name to route calls to database.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>postgres_limits_memory [str] = \"60Gi\": Postgres container memory\n      limit.\n  postgres_limits_cpu [str] = \"12000m\": Postgres cotainer CPU\n      limit.\n  postgres_requests_memory [str] = \"20Mi\":\n  postgres_requests_cpu [str] = \"1m\":\n  postgres_public_ip [str] = None:\n  firewall_ips [lis]t = None):</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_public_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">firewall_ips</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.name", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.postgres_public_ip", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.postgres_public_ip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.firewall_ips", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.firewall_ips", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.disk_size", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.disk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.disk_name", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.disk_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.postgres_limits_memory", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.postgres_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.postgres_limits_cpu", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.postgres_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.postgres_requests_memory", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.postgres_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.postgres_requests_cpu", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.postgres_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PostgresDatabase.create_deployment_file", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PostgresDatabase.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kube_client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase", "kind": "class", "doc": "<p>PumpWoodAuthMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.__init__", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.__init__", "kind": "function", "doc": "<p>Deploy a postgres server not associated with other microservices.</p>\n\n<p>Username is \"pumpwood\" and password is set as parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name [str]:</strong>  Name of the deploy, it will be used same name for the\nservice and secrets.</li>\n<li><strong>postgres_secret [str]:</strong>  Name of the postgres secret.</li>\n<li><strong>postgres_host [str]:</strong>  Host to connect to downstream\npostgres.</li>\n<li><strong>postgres_port [str]:</strong>  Port to connect to downstream\npostgres.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No kwargs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_secret</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">postgres_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.name", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.postgres_secret", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.postgres_secret", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.postgres_database", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.postgres_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.postgres_host", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.postgres_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.postgres_port", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.postgres_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.deploy.PGBouncerDatabase.create_deployment_file", "modulename": "pumpwood_deploy.microservices.postgres.deploy", "qualname": "PGBouncerDatabase.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kube_client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.postgres.postgres", "modulename": "pumpwood_deploy.microservices.postgres.postgres", "kind": "module", "doc": "<p>Postgres deploy fuctions.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.postgres.postgres.create_ssl_key_ssl_crt", "modulename": "pumpwood_deploy.microservices.postgres.postgres", "qualname": "create_ssl_key_ssl_crt", "kind": "function", "doc": "<p>Create SSL key and Certificate for Postgres connections.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.postgres.resources", "modulename": "pumpwood_deploy.microservices.postgres.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth", "modulename": "pumpwood_deploy.microservices.pumpwood_auth", "kind": "module", "doc": "<p>Deployment of Auth Microservices.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "kind": "module", "doc": "<p>PumpWood Auth Module.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-auth\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n  email_host_user: {email_host_user}\\n  email_host_password: {email_host_password}\\n  secret_key: {secret_key}\\n  mfa_twilio_account_sid: {mfa_twilio_account_sid}\\n  mfa_twilio_auth_token: {mfa_twilio_auth_token}\\n  sso__client_id: {sso__client_id}\\n  sso__secret: {sso__secret}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-auth-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-auth-app\\n      function: auth\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-auth-app\\n        function: auth\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: secrets\\n        secret:\\n          secretName: pumpwood-auth\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-auth-app\\n        image: {repository}pumpwood-auth-app:{version}\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        imagePullPolicy: IfNotPresent\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        ports:\\n        - containerPort: 5000\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-auth-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n        - name: PUMPWOOD_AUTH_IS_RABBITMQ_LOG\\n          value: &quot;{rabbitmq_log}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        - name: SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: secret_key\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: db_password\\n\\n        # RabbitMQ\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: microservice_password\\n\\n        # Email\\n        - name: EMAIL_HOST_USER\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: email_host_user\\n        - name: EMAIL_HOST_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: email_host_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n            secretKeyRef:\\n              name: azure--storage-key\\n              key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n            secretKeyRef:\\n              name: aws--storage-key\\n              key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: aws--storage-key\\n              key: aws_secret_access_key\\n\\n        ############\\n        # Metabase #\\n        - name: METABASE_SITE_URL\\n          valueFrom:\\n            configMapKeyRef:\\n              name: metabase\\n              key: site_url\\n              optional: true\\n\\n        - name: METABASE_SECRET_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: metabase\\n              key: embedding_secret_key\\n              optional: true\\n\\n        #######\\n        # MFA #\\n        - name: PUMPWOOD__MFA__APPLICATION_NAME\\n          value: &quot;{mfa_application_name}&quot;\\n        - name: PUMPWOOD__MFA__TOKEN_EXPIRATION_INTERVAL\\n          value: &quot;{mfa_token_expiration_interval}&quot;\\n        - name: PUMPWOOD__MFA__TWILIO_SENDER_PHONE_NUMBER\\n          value: &quot;{mfa_twilio_sender_phone_number}&quot;\\n        - name: PUMPWOOD__MFA__TWILIO_ACCOUNT_SID\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: mfa_twilio_account_sid\\n              optional: true\\n\\n        - name: PUMPWOOD__MFA__TWILIO_AUTH_TOKEN\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: mfa_twilio_auth_token\\n              optional: true\\n\\n        #######\\n        # SSO #\\n        - name: PUMPWOOD__SSO__REDIRECT_URL\\n          value: &quot;{sso__redirect_url}&quot;\\n        - name: PUMPWOOD__SSO__PROVIDER\\n          value: &quot;{sso__provider}&quot;\\n        - name: PUMPWOOD__SSO__AUTHORIZATION_URL\\n          value: &quot;{sso__authorization_url}&quot;\\n        - name: PUMPWOOD__SSO__TOKEN_URL\\n          value: &quot;{sso__token_url}&quot;\\n        - name: PUMPWOOD__SSO__CLIENT_ID\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: sso__client_id\\n              optional: true\\n        - name: PUMPWOOD__SSO__SECRET\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: sso__secret\\n              optional: true\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-auth-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-auth-app\\n    function: auth\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-auth-app\\n    function: auth\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.auth_admin_static", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "auth_admin_static", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-auth-static\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: static\\n      endpoint: pumpwood-auth-app\\n      function: auth\\n  template:\\n    metadata:\\n      labels:\\n        type: static\\n        endpoint: pumpwood-auth-app\\n        function: auth\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-auth-static\\n        image: {repository}pumpwood-auth-static:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;10m&quot;\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-auth-admin-static\\n  labels:\\n    type: static\\n    endpoint: pumpwood-auth-app\\n    function: auth\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: static\\n    endpoint: pumpwood-auth-app\\n    function: auth\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.auth_log_worker", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "auth_log_worker", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-auth-worker-log\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-auth-worker-log\\n      function: log\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: pumpwood-auth-worker-log\\n        function: log\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      - name: log-data\\n        persistentVolumeClaim:\\n          claimName: {volume_claim_name}\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-auth-log-worker\\n        image: {repository}pumpwood-auth-log-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n          - name: log-data\\n            mountPath: /logs/\\n\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        - name: WORKER_LOG_PATH\\n          value: &quot;/logs/&quot;\\n\\n        - name: TRINO_CATALOG\\n          value: {trino_catalog}\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n            secretKeyRef:\\n              name: azure--storage-key\\n              key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n            secretKeyRef:\\n              name: aws--storage-key\\n              key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: aws--storage-key\\n              key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-auth\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-auth-app\\n      function: auth\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-auth-app\\n        function: auth\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-auth\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}test-db-pumpwood-auth:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-auth-no-bouncer:5000/\\n        resources:\\n          requests:\\n            memory: &quot;20Mi&quot;\\n            cpu:  &quot;1m&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-auth\\n  labels:\\n    type: db\\n    endpoint: pumpwood-auth-app\\n    function: auth\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-auth-app\\n    function: auth\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-auth-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-auth-app\\n    function: auth\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-auth-app\\n    function: auth\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice", "kind": "class", "doc": "<p>Deploy PumpWood Auth Microservice.</p>\n\n<p>Pumpwood Auth Microservice is reponsible for make avaiable autorization\nend-points for Pumpwood based Systems.</p>\n\n<p>If also make avaiable routes for registering Kong services and routes\nwhich can be used to add new microservice to Pumpwood stack.</p>\n\n<p>It is possible to use a test database for deploying or a connection with\npostgres database.</p>\n\n<p>Deploy example with test database:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">PumpWoodAuthMicroservice</span><span class=\"p\">(</span>\n<span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;8540&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">email_host_user</span><span class=\"o\">=</span><span class=\"s2\">&quot;teste1&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">email_host_password</span><span class=\"o\">=</span><span class=\"s2\">&quot;teste2&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;qualidadecompradev&quot;</span><span class=\"p\">,</span>\n\n<span class=\"c1\"># App</span>\n<span class=\"n\">repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;qualidadedecompra.azurecr.io&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">app_replicas</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"n\">app_version</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">&#39;PUMPWOOD_AUTH_APP&#39;</span><span class=\"p\">),</span>\n<span class=\"n\">app_debug</span><span class=\"o\">=</span><span class=\"s2\">&quot;TRUE&quot;</span><span class=\"p\">,</span>\n\n<span class=\"c1\"># Static</span>\n<span class=\"n\">static_repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;qualidadedecompra.azurecr.io&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">static_version</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">&#39;PUMPWOOD_AUTH_STATIC&#39;</span><span class=\"p\">),</span>\n\n<span class=\"c1\"># Test Database</span>\n<span class=\"n\">test_db_repository</span><span class=\"o\">=</span><span class=\"s2\">&quot;qualidadedecompra.azurecr.io&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">test_db_version</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">&#39;TEST_DB_PUMPWOOD_AUTH&#39;</span><span class=\"p\">),</span>\n<span class=\"n\">test_db_limits_memory</span><span class=\"o\">=</span><span class=\"s2\">&quot;2Gi&quot;</span><span class=\"p\">,</span>\n<span class=\"n\">test_db_limits_cpu</span><span class=\"o\">=</span><span class=\"s2\">&quot;2000m&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.__init__", "kind": "function", "doc": "<p>Deploy PumpWood Auth Microservice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>secret_key [str]:</strong>  Hash salt used to generate password hash saved on database.</li>\n<li><strong>microservice_password [str]:</strong>  Password associated with service user <code>microservice--auth</code>.</li>\n<li><strong>db_username [str]:</strong>  Database connection username.</li>\n<li><strong>db_password [str]:</strong>  Auth DB password.</li>\n<li><strong>db_host [str]:</strong>  Database connection host.</li>\n<li><strong>db_port [str]:</strong>  Database connection port.</li>\n<li><strong>db_database [str]:</strong>  Database connection database.</li>\n<li><strong>bucket_name [str]:</strong>  Name of the bucket, s3 or storage that will be associated with\npumpwood auth. The same bucket can be used by different\nmicroservice, each one will save data.</li>\n<li><strong>email_host_user [str]:</strong>  Auth email conection username for Django send emails.</li>\n<li><strong>email_host_password [str]:</strong>  Auth email conection password for Django send emails.</li>\n<li><strong>repository [str]:</strong>  Repository to pull auth images from. It will be pulled\napplication (pumpwood-auth-app), logs worker\n(pumpwood-auth-log-worker).</li>\n<li><strong>app_version [str]:</strong>  Version of the auth microservice application.</li>\n<li><strong>app_timeout [int]:</strong>  Timeout limit set in seconds for auth application.</li>\n<li><strong>app_workers [int]:</strong>  Number of workers spanned at gunicorn for Auth Application.</li>\n<li><strong>app_limits_memory [str]:</strong>  Auth application memory consumption limit.</li>\n<li><strong>app_limits_cpu [str]:</strong>  Auth application CPU consumption limit.</li>\n<li><strong>app_requests_memory (str):</strong>  Auth application memory request.</li>\n<li><strong>app_requests_cpu [str]:</strong>  Auth application CPU request.</li>\n<li><strong>app_replicas [int]:</strong>  Number of replicas for application deployment.</li>\n<li><strong>static_version [str]:</strong>  Version of the image with static file for service javascript,\nlogos, fonts and other statics data.</li>\n<li><strong>static_repository [str]:</strong>  Repository to pull static image (pumpwood-auth-static) from.</li>\n<li><strong>worker_log_version [str]:</strong>  Version of the loging worker. If log worker is not set,\nit will not be deployed and log information will be printed on\nauth stdout.</li>\n<li><strong>worker_debug [str]:</strong>  If log worker is set on debug mode. Accepts 'FALSE' and 'TRUE'\noptions.</li>\n<li><strong>worker_log_disk_name [str]:</strong>  Name of the disk that will be attached to log worker to save\nunprocessed log data.</li>\n<li><strong>worker_log_disk_size [str]:</strong>  Size of the disk that will be attached to log worker.</li>\n<li><strong>worker_trino_catalog [str]:</strong>  Trino catalog that will be used to map log data information.</li>\n<li><strong>test_db_version [str]:</strong>  Set a test database with version. If not set test database\nwill not be deployed.</li>\n<li><strong>test_db_repository [str]:</strong>  Define a repository for the test database.</li>\n<li><strong>test_db_limits_memory [str]:</strong>  Limits for test database resources. Default 1Gi.</li>\n<li><strong>test_db_limits_cpu [str]:</strong>  Limits for test databas resources. Default 1000m.</li>\n<li><strong>worker_log_version [str]:</strong>  Version of the log worker to deploy. If not set worker will\nnot be deployed.</li>\n<li><strong>worker_log_disk_name [str]:</strong>  Name of the disk to be used on worker deploy.</li>\n<li><strong>worker_log_disk_size [str]:</strong>  Size of the disk allocated to worker\nlog container.</li>\n<li><strong>worker_trino_catalog [str]:</strong>  Trino catalog to query for logs on\nstorage.</li>\n<li><strong>mfa_application_name [str]:</strong>  Name of the application at SMS MFA message. If not set MFA\nauthentication using SMS will not be avaiable at Pumpwood.</li>\n<li><strong>mfa_token_expiration_interval [str]:</strong>  MFA token expiration interval in seconds. Default 300 seconds\n(5 minutes).</li>\n<li><strong>mfa_twilio_sender_phone_number [str]:</strong>  Phone that Twillio will use to send SMS. If None,\nMFA using Twillio SMS will be disable.</li>\n<li><strong>mfa_twilio_account_sid [str]:</strong>  Twillio account id used to send SMS. If None, MFA using\nTwillio SMS will be disable.</li>\n<li><strong>mfa_twilio_auth_token [str]:</strong>  Twillio auth token id used to sendo SMS. If None, MFA using\nTwillio SMS will be disable.</li>\n<li><strong>sso__redirect_url [str]:</strong>  URL that will be used for redirecting the oauth2 after login.</li>\n<li><strong>sso__provider [str]:</strong>  Provides associated with oauth2, so far only <code>microsoft-entra</code>\nhave been implemented.</li>\n<li><strong>sso__authorization_url [str]:</strong>  URL associated with autorization for oauth2.</li>\n<li><strong>sso__token_url [str]:</strong>  URL to fetch token data after authentication.</li>\n<li><strong>sso__client_id [str]:</strong>  Secret associated with SSO client_id.</li>\n<li><strong>sso__secret [str]:</strong>  Secret associated with SSO sso__secret.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">secret_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email_host_user</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email_host_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">static_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;microservice--auth&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-auth&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_log_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_log_disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_log_disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_trino_catalog</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">static_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mfa_application_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mfa_token_expiration_interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mfa_twilio_sender_phone_number</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mfa_twilio_account_sid</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mfa_twilio_auth_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sso__redirect_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sso__provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sso__authorization_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sso__token_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sso__client_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sso__secret</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.static_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.static_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.static_version", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.static_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.test_db_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.test_db_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.test_db_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.test_db_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.worker_trino_catalog", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.worker_trino_catalog", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.worker_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.worker_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.worker_log_version", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.worker_log_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.worker_log_disk_name", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.worker_log_disk_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.worker_log_disk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.worker_log_disk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.mfa_application_name", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.mfa_application_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.mfa_token_expiration_interval", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.mfa_token_expiration_interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.mfa_twilio_sender_phone_number", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.mfa_twilio_sender_phone_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.sso__redirect_url", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.sso__redirect_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.sso__provider", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.sso__provider", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.sso__authorization_url", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.sso__authorization_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.sso__token_url", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.sso__token_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.deploy.PumpWoodAuthMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.deploy", "qualname": "PumpWoodAuthMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create_deployment_file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client [Kubernets]:</strong>  Instance of <code>kubernets.kubernets.Kubernets</code> object to help\nattacing disks to pods and other Kubernets operations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kube_client</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice.TestPumpWoodAuthMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice", "qualname": "TestPumpWoodAuthMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice.TestPumpWoodAuthMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice", "qualname": "TestPumpWoodAuthMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice.TestPumpWoodAuthMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_auth.tests.test__PumpWoodAuthMicroservice", "qualname": "TestPumpWoodAuthMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "kind": "module", "doc": "<p>PumpWood Complex DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-complex-datalake\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-complex-datalake-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-complex-datalake-app\\n      function: complex-datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-complex-datalake-app\\n        function: complex-datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - image: {repository}/pumpwood-complex-datalake-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-complex-datalake-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-complex-datalake\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-complex-datalake\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-complex-datalake-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-complex-datalake-app\\n    function: complex-datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-complex-datalake-app\\n    function: complex-datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.worker_datalake_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "worker_datalake_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-complex-datalake-worker-complex-database\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-complex-datalake-app\\n      function: dataloader-complex-database\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-complex-datalake-app\\n          function: dataloader-complex-database\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-dataloader-worker\\n        image: {repository}/pumpwood-complex-datalake-worker-complex-database:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-complex-datalake\\n              key: db_password\\n\\n        #RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-complex-datalake\\n                key: microservice_password\\n\\n        # Limit process\\n        - name: N_PARALLEL\\n          value: \\&#x27;{n_parallel}\\&#x27;\\n        - name: CHUNK_SIZE\\n          value: \\&#x27;{chunk_size}\\&#x27;\\n        - name: QUERY_LIMIT\\n          value: \\&#x27;{query_limit}\\&#x27;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.worker_simple_annotation_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "worker_simple_annotation_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-complex-datalake-worker-simple-annotation\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-complex-datalake-app\\n      function: dataloader-simple-annotation\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-complex-datalake-app\\n          function: dataloader-simple-annotation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-dataloader-worker\\n        image: {repository}/pumpwood-complex-datalake-worker-simple-annotation:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-complex-datalake\\n              key: db_password\\n\\n        #RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-complex-datalake\\n                key: microservice_password\\n\\n        # Limit process\\n        - name: N_PARALLEL\\n          value: \\&#x27;{n_parallel}\\&#x27;\\n        - name: CHUNK_SIZE\\n          value: \\&#x27;{chunk_size}\\&#x27;\\n        - name: QUERY_LIMIT\\n          value: \\&#x27;{query_limit}\\&#x27;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.worker_complex_annotation_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "worker_complex_annotation_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-complex-datalake-worker-complex-annotation\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-complex-datalake-app\\n      function: dataloader-complex-annotation\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-complex-datalake-app\\n          function: dataloader-complex-annotation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-dataloader-worker\\n        image: {repository}/pumpwood-complex-datalake-worker-complex-annotation:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-complex-datalake\\n              key: db_password\\n\\n        # RabbitMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-complex-datalake\\n                key: microservice_password\\n\\n        # Limit process\\n        - name: N_PARALLEL\\n          value: \\&#x27;{n_parallel}\\&#x27;\\n        - name: CHUNK_SIZE\\n          value: \\&#x27;{chunk_size}\\&#x27;\\n        - name: QUERY_LIMIT\\n          value: \\&#x27;{query_limit}\\&#x27;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-complex-datalake\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-complex-datalake-app\\n      function: complex-datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-complex-datalake-app\\n        function: complex-datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      resources:\\n        limits:\\n          memory: &quot;1Gi&quot;\\n          cpu:  &quot;1000m&quot;\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-complex-datalake\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-pumpwood-complex-datalake:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-complex-datalake-no-bouncer:5000/\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n          limits:\\n            cpu: &quot;3&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-complex-datalake\\n  labels:\\n    type: db\\n    endpoint: pumpwood-complex-datalake-app\\n    function: complex-datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-complex-datalake-app\\n    function: complex-datalake\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-complex-datalake-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-complex-datalake-app\\n    function: complex-datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-complex-datalake-app\\n    function: complex-datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice", "kind": "class", "doc": "<p>PumpWood Complex Datalake Microservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password (str):</strong>  Password for database.</li>\n<li><strong>microservice_password(str):</strong>  Microservice password.</li>\n<li><strong>postgres_public_ip (str):</strong>  Postgres public IP.</li>\n<li><strong>firewall_ips (list):</strong>  List the IPs allowed to connect to datalake.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  Version of the App Image.</li>\n<li><strong>worker_datalake_dataloader_version (str):</strong>  Version of the complex\ndatalake dataloader.</li>\n<li><strong>worker_simple_dataloader_version (str):</strong>  Version of the complex\nsimple annotation dataloader.</li>\n<li><strong>worker_complex_dataloader_version (str):</strong>  Version of the complex\ncomplex annotation dataloader.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>disk_size (str): Disk size (ex.: 50Gi, 100Gi)\n  disk_name (str): Name of the disk that will be used in postgres\n  repository (str) = \"gcr.io/repositorio-geral-170012\": Repository to\n    pull Image\n  test_db_version (str): Set a test database with version.\n  test_db_repository (str): Define a repository for the test\n    database.\n  db_username (str): Database connection username.\n  db_host (str): Database connection host.\n  db_port (str): Database connection port.\n  db_database (str): Database connection database.\n  app_replicas (int) = 1: Number of replicas in app deployment.\n  app_timeout (int): Timeout in seconds for the guinicorn workers.\n  app_workers (int): Number of workers to spaw at guinicorn.\n  app_limits_memory (str) = \"60Gi\": Memory limits for app pods.\n  app_limits_cpu (str) = \"12000m\": CPU limits for app pods.\n  app_requests_memory (str) = \"20Mi\": Memory requests for app pods.\n  app_requests_cpu (str) = \"1m\": CPU requests for app pods.</p>\n  \n  <p>*_replicas (int) = 1: Number of replicas associated with\n    dataloader.\n  *_n_chunks (str) = 5: n chunks working o data loader.\n  *_chunk_size (str) = 5000: Size of the datalake chunks.\n  *_limits_memory (str) = \"60Gi\": Memory requests for worker\n    pods.\n  *_limits_cpu (str) = \"12000m\": CPU requests for worker pods.\n  *_requests_memory (str) = \"20Mi\": Memory requests for worker\n    pods.\n  *_requests_cpu (str) = \"1m\": CPU requests for worker pod.\n  postgres_limits_memory (str) = \"60Gi\":  Memory limits for postgres\n    pod.\n  postgres_limits_cpu (str) = \"12000m\":  CPU limits for postgres pod.\n  postgres_requests_memory (str) = \"20Mi\":  Memory request for postgres\n    pod.\n  postgres_requests_cpu (str) = \"1m\":  CPU request for postgres pod.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodDatalakeMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_datalake_dataloader_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_simple_dataloader_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_complex_dataloader_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-complex-datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_query_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_dataloader_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_query_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">simple_dataloader_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_query_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">complex_dataloader_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.worker_datalake_dataloader_version", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.worker_datalake_dataloader_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.worker_simple_dataloader_version", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.worker_simple_dataloader_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.worker_complex_dataloader_version", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.worker_complex_dataloader_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_n_parallel", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_n_parallel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_chunk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_chunk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_query_limit", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_query_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.datalake_dataloader_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.datalake_dataloader_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_n_parallel", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_n_parallel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_chunk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_chunk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_query_limit", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_query_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.simple_dataloader_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.simple_dataloader_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_n_parallel", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_n_parallel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_chunk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_chunk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_query_limit", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_query_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.complex_dataloader_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.complex_dataloader_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy.PumpWoodComplexDatalakeMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.deploy", "qualname": "PumpWoodComplexDatalakeMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice.TestPumpWoodComplexDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice", "qualname": "TestPumpWoodComplexDatalakeMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice.TestPumpWoodComplexDatalakeMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice", "qualname": "TestPumpWoodComplexDatalakeMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice.TestPumpWoodComplexDatalakeMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_complex_datalake.tests.test__PumpWoodComplexDatalakeMicroservice", "qualname": "TestPumpWoodComplexDatalakeMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake", "kind": "module", "doc": "<p>Deployment of Datalake Microservices.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n\n<p>Datalake Microservice is the main service for data storage, it will\ndefine modeling units the main dimension for storing information on\nPumpwood</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-datalake\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-datalake-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-datalake-app\\n      function: datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-datalake-app\\n        function: datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-datalake\\n        image: {repository}/pumpwood-datalake-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-datalake-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-datalake\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-datalake\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-datalake-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-datalake-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-datalake-app\\n    function: datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.worker_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "worker_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-datalake-dataloader-worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-datalake-app\\n      function: dataloader\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-datalake-app\\n          function: dataloader\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-dataloader-worker\\n        image: {repository}/pumpwood-datalake-dataloader-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-datalake\\n              key: db_password\\n\\n        #RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-datalake\\n                key: microservice_password\\n\\n        # Limit process\\n        - name: N_PARALLEL\\n          value: \\&#x27;{n_parallel}\\&#x27;\\n        - name: CHUNK_SIZE\\n          value: \\&#x27;{chunk_size}\\&#x27;\\n        - name: QUERY_LIMIT\\n          value: \\&#x27;{query_limit}\\&#x27;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-datalake\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-datalake-app\\n      function: datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-datalake-app\\n        function: datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-datalake\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-pumpwood-datalake:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-datalake-no-bouncer:5000/\\n        resources:\\n          requests:\\n            memory: &quot;20Mi&quot;\\n            cpu:  &quot;1m&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-datalake\\n  labels:\\n    type: db\\n    endpoint: pumpwood-datalake-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-datalake-app\\n    function: datalake\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-datalake-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-datalake-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-datalake-app\\n    function: datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice", "kind": "class", "doc": "<p>Deploy Class for Datalake Microservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.__init__", "kind": "function", "doc": "<p>Class Constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>bucket_name [str]:</strong>  Name of the bucket that will be associated with pods.</li>\n<li><strong>microservice_password [str]:</strong>  Password associated with service user <code>microservice--datalake</code>.</li>\n<li><strong>db_username [str]:</strong>  Username for connection with Postgres.</li>\n<li><strong>db_password [str]:</strong>  Password for connection with Postgres.</li>\n<li><strong>db_host [str]:</strong>  Host for connection with Postgres.</li>\n<li><strong>db_port [str]:</strong>  Port for connection with Postgres.</li>\n<li><strong>db_database [str]:</strong>  Database for connection with Postgres.</li>\n<li><strong>repository [str]:</strong>  Repository that will be used to fetch <code>pumpwood-datalake-app</code>\nand <code>pumpwood-datalake-dataloader-worker</code> images.</li>\n<li><strong>test_db_version [str]:</strong>  Version of the database for testing.</li>\n<li><strong>test_db_repository [str]:</strong>  Repository associated with testing database.</li>\n<li><strong>test_db_limits_memory [str]:</strong>  Memory limits associated with test database.</li>\n<li><strong>test_db_limits_cpu [str]:</strong>  CPU limits associated with test database.</li>\n<li><strong>app_version [str]:</strong>  Version of the application image.</li>\n<li><strong>app_debug [str]:</strong>  If application is set as DEBUG mode. Values 'TRUE'/'FALSE'.</li>\n<li><strong>app_replicas [int]:</strong>  Number of replicas for application pods.</li>\n<li><strong>app_timeout [int]:</strong>  Timeout in seconds for requests at application.</li>\n<li><strong>app_workers [int]:</strong>  Number of workers that will be spanned at guinicorn.</li>\n<li><strong>app_limits_memory [str]:</strong>  Memory limit associated with application pods.</li>\n<li><strong>app_limits_cpu [str]:</strong>  CPU limit associated with application pods.</li>\n<li><strong>app_requests_memory [str]:</strong>  Memory requested associated with application pods.</li>\n<li><strong>app_requests_cpu [str]:</strong>  CPU requested associated with application pods.</li>\n<li><strong>worker_version [str]:</strong>  Version for the worker pod.</li>\n<li><strong>worker_debug [str]:</strong>  If worker is set as DEBUG mode. Values 'TRUE'/'FALSE'.</li>\n<li><strong>worker_replicas [int]:</strong>  Number of pods that will be deployed for worker.</li>\n<li><strong>worker_n_parallel [int]:</strong>  Number of parallel requests that will be performed to\nupload data to datalake.</li>\n<li><strong>worker_chunk_size [int]:</strong>  Number of rows that will be uploaded to database at each\nparallel request.</li>\n<li><strong>worker_query_limit [int]:</strong>  Number of rows that will be treated at each upload cicle.</li>\n<li><strong>worker_limits_memory [str]:</strong>  Memory limit associated with dataloader worker pods.</li>\n<li><strong>worker_limits_cpu [str]:</strong>  CPU limit associated with dataloader worker pods.</li>\n<li><strong>worker_requests_memory [str]:</strong>  Memory requested associated with dataloader worker pods.</li>\n<li><strong>worker_requests_cpu [str]:</strong>  CPU requested associated with dataloader worker pods.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;microservice--datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">worker_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">worker_query_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_version", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_n_parallel", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_n_parallel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_chunk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_chunk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_query_limit", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_query_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.worker_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.worker_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.test_db_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.test_db_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.test_db_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.test_db_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.deploy.PumpWoodDatalakeMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.deploy", "qualname": "PumpWoodDatalakeMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice.TestPumpWoodDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice", "qualname": "TestPumpWoodDatalakeMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice.TestPumpWoodDatalakeMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice", "qualname": "TestPumpWoodDatalakeMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice.TestPumpWoodDatalakeMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_datalake.tests.test__PumpWoodDatalakeMicroservice", "qualname": "TestPumpWoodDatalakeMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-description-matcher\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-description-matcher-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-description-matcher-app\\n      function: description-matcher\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-description-matcher-app\\n        function: description-matcher\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-description-matcher\\n        image: {repository}/pumpwood-description-matcher-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-description-matcher-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-description-matcher\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-description-matcher\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-description-matcher-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-description-matcher-app\\n    function: description-matcher\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-description-matcher-app\\n    function: description-matcher\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-description-matcher\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-description-matcher-app\\n      function: description-matcher\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-description-matcher-app\\n        function: description-matcher\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-description-matcher\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-description-matcher:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-description-matcher-no-bouncer:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-description-matcher\\n  labels:\\n    type: db\\n    endpoint: pumpwood-description-matcher-app\\n    function: description-matcher\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-description-matcher-app\\n    function: description-matcher\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-description-matcher-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-description-matcher-app\\n    function: description-matcher\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-description-matcher-app\\n    function: description-matcher\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice", "kind": "class", "doc": "<p>PumpWoodDatalakeMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password (str):</strong>  Password for database.</li>\n<li><strong>microservice_password(str):</strong>  Microservice password.</li>\n<li><strong>postgres_public_ip (str):</strong>  Postgres public IP.</li>\n<li><strong>firewall_ips (list):</strong>  List the IPs allowed to connect to datalake.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  Verison of the App Image.</li>\n<li><strong>version_worker (str):</strong>  Verison of the Worker Image.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>db_username (str): Database connection username.\n  db_host (str): Database connection host.\n  db_port (str): Database connection port.\n  db_database (str): Database connection database.\n  app_limits_memory (str) = \"60Gi\": Memory limits for app pods.\n  app_limits_cpu (str) = \"12000m\": CPU limits for app pods.\n  app_requests_memory (str) = \"20Mi\": Memory requests for app pods.\n  app_requests_cpu (str) = \"1m\": CPU requests for app pods.\n  replicas (int) = 1: Number of replicas in app deployment.\n  workers_timeout (str): Time to workout time for guicorn workers.\n  n_chunks (str) = 5: n chunks working o data loader.\n  chunk_size (str) = 5000: Size of the datalake chunks.\n  repository (str) = \"gcr.io/repositorio-geral-170012\": Repository to\n    pull Image\n  test_db_version (str): Set a test database with version.\n  test_db_repository (str): Define a repository for the test\n    database.\n  debug (str): Set app in debug mode.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodDatalakeMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-description-matcher&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy.PumpWoodDescriptionMatcherMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.deploy", "qualname": "PumpWoodDescriptionMatcherMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No kwargs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice.TestPumpWoodDescriptionMatcherMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice", "qualname": "TestPumpWoodDescriptionMatcherMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice.TestPumpWoodDescriptionMatcherMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice", "qualname": "TestPumpWoodDescriptionMatcherMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice.TestPumpWoodDescriptionMatcherMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_description_matcher.tests.test__PumpWoodDescriptionMatcherMicroservice", "qualname": "TestPumpWoodDescriptionMatcherMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "kind": "module", "doc": "<p>PumpWood Dummy Models Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-dummy-models\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-dummy-models-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-dummy-models-app\\n      function: dummy-models\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-dummy-models-app\\n        function: dummy-models\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-dummy-models\\n        image: {repository}/pumpwood-dummy-models-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-dummy-models-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-dummy-models\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-dummy-models\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-dummy-models-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-dummy-models-app\\n    function: dummy-models\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-dummy-models-app\\n    function: dummy-models\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-dummy-models\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-dummy-models-app\\n      function: dummy-models\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-dummy-models-app\\n        function: dummy-models\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-dummy-models\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-dummy-models:{version}\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-dummy-models-no-bouncer:5000/\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-dummy-models\\n  labels:\\n    type: db\\n    endpoint: pumpwood-dummy-models-app\\n    function: dummy-models\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-dummy-models-app\\n    function: dummy-models\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-dummy-models-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-dummy-models-app\\n    function: dummy-models\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-dummy-models-app\\n    function: dummy-models\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice", "kind": "class", "doc": "<p>PumpWoodDummyModelsMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password (str):</strong>  Password for database.</li>\n<li><strong>microservice_password(str):</strong>  Microservice password.</li>\n<li><strong>postgres_public_ip (str):</strong>  Postgres public IP.</li>\n<li><strong>firewall_ips (list):</strong>  List the IPs allowed to connect to datalake.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  Verison of the App Image.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>db_username (str): Database connection username.\n  db_host (str): Database connection host.\n  db_port (str): Database connection port.\n  db_database (str): Database connection database.\n  app_debug (str): Set app in debug mode.\n  app_limits_memory (str) = \"60Gi\": Memory limits for app pods.\n  app_limits_cpu (str) = \"12000m\": CPU limits for app pods.\n  app_requests_memory (str) = \"20Mi\": Memory requests for app pods.\n  app_requests_cpu (str) = \"1m\": CPU requests for app pods.\n  app_timeout (str): Time to workout time for guicorn workers.\n  app_workers (int): N workers on pod deploy.\n  replicas (int) = 1: Number of replicas in app deployment.\n  repository (str) = \"gcr.io/repositorio-geral-170012\": Repository to\n    pull Image\n  test_db_version (str): Set a test database with version.\n  test_db_repository (str): Define a repository for the test\n    database.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodDummyModelsMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No specific raises.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-dummy-models&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy.PumpWoodDummyModelsMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.deploy", "qualname": "PumpWoodDummyModelsMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice.TestPumpWoodDummyModelsMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice", "qualname": "TestPumpWoodDummyModelsMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice.TestPumpWoodDummyModelsMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice", "qualname": "TestPumpWoodDummyModelsMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice.TestPumpWoodDummyModelsMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_dummy_models.tests.test__PumpWoodDummyModelsMicroservice", "qualname": "TestPumpWoodDummyModelsMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-estimation\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-estimation-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-estimation-app\\n      function: estimation\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-estimation-app\\n        function: estimation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-estimation\\n        image: {repository}/pumpwood-estimation-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-estimation-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-estimation\\n              key: db_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-estimation\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-estimation-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-estimation-app\\n    function: estimation\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-estimation-app\\n    function: estimation\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.worker_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "worker_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-estimation-rawdata-workers\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-estimation-app\\n      function: raw-data-builder\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: pumpwood-estimation-app\\n        function: raw-data-builder\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-estimation-rawdata-workers\\n        image: {repository}/pumpwood-estimation-rawdata-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DATALAKE_DB_USERNAME\\n          value: {datalake_db_username}\\n        - name: DATALAKE_DB_HOST\\n          value: {datalake_db_host}\\n        - name: DATALAKE_DB_PORT\\n          value: &quot;{datalake_db_port}&quot;\\n        - name: DATALAKE_DB_DATABASE\\n          value: {datalake_db_database}\\n        - name: DATALAKE_DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-datalake\\n              key: db_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_NAME\\n          value: \\&#x27;pumpwood-estimation-rawdata\\&#x27;\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-estimation\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-estimation\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-estimation-app\\n      function: estimation\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-estimation-app\\n        function: estimation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-estimation\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres-pumpwood-estimation\\n        image: {repository}/test-db-pumpwood-estimation:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-estimation-no-bouncer:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-estimation\\n  labels:\\n    type: db\\n    endpoint: pumpwood-estimation-app\\n    function: estimation\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-estimation-app\\n    function: estimation\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-estimation-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-estimation-app\\n    function: estimation\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-estimation-app\\n    function: estimation\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice", "kind": "class", "doc": "<p>PumpWoodEstimationMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice_password (str):</strong>  Microservice password.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  Verison of the estimation app imageself.</li>\n<li><strong>worker_version (str):</strong>  Version of the raw data worker.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>db_username (str): Database connection username.\n  db_password (str): password at database.\n  db_host (str): Database connection host.\n  db_port (str): Database connection port.\n  db_database (str): Database connection database.\n  app_limits_memory (str) = \"60Gi\": Memory limits for app pods.\n  app_limits_cpu (str) = \"12000m\": CPU limits for app pods.\n  app_requests_memory (str) = \"20Mi\": Memory requests for app pods.\n  app_requests_cpu (str) = \"1m\": CPU requests for app pods.\n  worker_limits_memory: str = \"60Gi\":  Memory limits for worker pods.\n  worker_limits_cpu: str = \"12000m\": CPU limits for worker pods.\n  worker_requests_memory: str = \"20Mi\": Memory requests for worker\n    pods.\n  worker_requests_cpu: str = \"1m\":  CPU requests for worker pods.\n  repository (str): Repository to pull Image.\n  workers_timeout (int): Time in seconds to timeout of uwsgi worker.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodDatalakeMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">workers_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-estimation&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.datalake_db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.datalake_db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.datalake_db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.datalake_db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.datalake_db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.datalake_db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.datalake_db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.datalake_db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.worker_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.worker_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.worker_version", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.worker_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.worker_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.worker_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.worker_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.worker_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.worker_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.worker_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.worker_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.worker_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.deploy.PumpWoodEstimationMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.deploy", "qualname": "PumpWoodEstimationMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice.TestPumpWoodEstimationMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice", "qualname": "TestPumpWoodEstimationMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice.TestPumpWoodEstimationMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice", "qualname": "TestPumpWoodEstimationMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice.TestPumpWoodEstimationMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_estimation.tests.test__PumpWoodEstimationMicroservice", "qualname": "TestPumpWoodEstimationMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl", "modulename": "pumpwood_deploy.microservices.pumpwood_etl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "kind": "module", "doc": "<p>PumpWood ETL Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-etl\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-etl-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-etl-app\\n      function: datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-etl-app\\n        function: datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-etl-app\\n        image: {repository}/pumpwood-etl-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-etl-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-etl\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-etl\\n                key: microservice_password\\n\\n        # Airflow connection\\n        - name: AIRFLOW_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-etl\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-etl-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-etl-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-etl-app\\n    function: datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.worker_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "worker_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-etl-worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-etl-app\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-etl-app\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-etl-worker\\n        image: {repository}/pumpwood-etl-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-etl\\n              key: db_password\\n\\n        #RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-etl\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-etl\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-etl-app\\n      function: datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-etl-app\\n        function: datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-etl\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-pumpwood-etl:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-etl-no-bouncer:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-etl\\n  labels:\\n    type: db\\n    endpoint: pumpwood-etl-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-etl-app\\n    function: datalake\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-etl-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-etl-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-etl-app\\n    function: datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice", "kind": "class", "doc": "<p>PumpWoodETLMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice_password (str):</strong>  Microservice password.</li>\n<li><strong>disk_size (str):</strong>  Disk size (ex.: 50Gi, 100Gi)</li>\n<li><strong>disk_name (str):</strong>  Name of the disk that will be used in postgres</li>\n<li><strong>postgres_public_ip (str):</strong>  Postgres public IP.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  Verison of the estimation app imageself.</li>\n<li><strong>worker_version (str):</strong>  Version of the raw data worker.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>db_password (str): password at database.\n  repository (str): Repository to pull Image.\n  workers_timeout (int): Time in seconds to timeout of uwsgi worker.\n  db_username (str): Database connection username.\n  db_host (str): Database connection host.\n  db_port (str): Database connection port.\n  db_database (str): Database connection database.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodDatalakeMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">workers_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-etl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.debug", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.worker_version", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.worker_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.worker_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.worker_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.worker_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.worker_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.worker_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.worker_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.worker_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.worker_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.worker_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.worker_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.deploy.PumpWoodETLMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.deploy", "qualname": "PumpWoodETLMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice.TestPumpWoodETLMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice", "qualname": "TestPumpWoodETLMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice.TestPumpWoodETLMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice", "qualname": "TestPumpWoodETLMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice.TestPumpWoodETLMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_etl.tests.test__PumpWoodETLMicroservice", "qualname": "TestPumpWoodETLMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "kind": "module", "doc": "<p>PumpWood Graph DataLake Microservice Deploy.</p>\n\n<p>Graph Datalake Microservice is reposible for storing data that associate\ntwo different modeling units with edge attributes.</p>\n\n<p>It also can be used for recursive queries.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-graph-datalake\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-graph-datalake-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-graph-datalake-app\\n      function: datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-graph-datalake-app\\n        function: datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-graph-datalake\\n        image: {repository}/pumpwood-graph-datalake-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-graph-datalake-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-graph-datalake\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-graph-datalake\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-graph-datalake-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-graph-datalake-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-graph-datalake-app\\n    function: datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.worker_num_edges", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "worker_num_edges", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-graph-datalake-worker-dataloader-edge\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-graph-datalake-app\\n      function: dataloader-numerical\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-graph-datalake-app\\n          function: dataloader-numerical\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-graph-datalake-worker-dataloader-edge\\n        image: {repository}/pumpwood-graph-datalake-worker-dataloader-edge:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-graph-datalake\\n              key: db_password\\n\\n        # RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-graph-datalake\\n                key: microservice_password\\n\\n        # Limit process\\n        - name: N_PARALLEL\\n          value: \\&#x27;{n_parallel}\\&#x27;\\n        - name: CHUNK_SIZE\\n          value: \\&#x27;{chunk_size}\\&#x27;\\n        - name: QUERY_LIMIT\\n          value: \\&#x27;{query_limit}\\&#x27;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.worker_text_edges", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "worker_text_edges", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-graph-datalake-worker-dataloader-text-edge\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-graph-datalake-app\\n      function: dataloader-text\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-graph-datalake-app\\n          function: dataloader-text\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-graph-datalake-worker-dataloader-text-edge\\n        image: {repository}/pumpwood-graph-datalake-worker-dataloader-text-edge:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n\\n        # HASH_SALT\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-graph-datalake\\n              key: db_password\\n\\n        # RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-graph-datalake\\n                key: microservice_password\\n\\n        # Limit process\\n        - name: N_PARALLEL\\n          value: \\&#x27;{n_parallel}\\&#x27;\\n        - name: CHUNK_SIZE\\n          value: \\&#x27;{chunk_size}\\&#x27;\\n        - name: QUERY_LIMIT\\n          value: \\&#x27;{query_limit}\\&#x27;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-graph-datalake\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-graph-datalake-app\\n      function: datalake\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-graph-datalake-app\\n        function: datalake\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-graph-datalake\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-pumpwood-graph-datalake:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-graph-datalake-no-bouncer:5000/\\n        resources:\\n          requests:\\n            memory: &quot;20Mi&quot;\\n            cpu:  &quot;1m&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-graph-datalake\\n  labels:\\n    type: db\\n    endpoint: pumpwood-graph-datalake-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-graph-datalake-app\\n    function: datalake\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-graph-datalake-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-graph-datalake-app\\n    function: datalake\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-graph-datalake-app\\n    function: datalake\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice", "kind": "class", "doc": "<p>PumpWoodGraphDatalakeMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice_password [str]:</strong>  Password associated with microservice service user\n<code>microservice--graph-datalake</code>. Service user login will be\navaiable only inside the cluster.</li>\n<li><strong>bucket_name [str]:</strong>  Name of the bucket that will be used at the Graph Datalake\nmicroservices.</li>\n<li><strong>app_version [str]:</strong>  Version of the application associated with Graph Datalake.</li>\n<li><strong>worker_num_version [str]:</strong>  Version of the worker for numerical edges for Graph Datalake\nmicroservices.</li>\n<li><strong>worker_text_version [str]:</strong>  Version of the worker for text edges for Graph Datalake\nmicroservices.</li>\n<li><strong>db_username [str]:</strong>  Username that will be used to connect with Postgres database.\nDefaul value <code>pumpwood</code>.</li>\n<li><strong>db_password [str]:</strong>  Password that will be used to connect with Postgres database.\nDefaul value <code>pumpwood</code>.</li>\n<li><strong>db_host [str]:</strong>  Host that will be used to connect with Postgres database.\nDefaul value <code>pumpwood</code>.</li>\n<li><strong>db_port [str]:</strong>  Port that will be used to connect with Postgres database.\nDefaul value <code>pumpwood</code>.</li>\n<li><strong>db_database [str]:</strong>  Database that will be used to connect with Postgres database.\nDefaul value <code>pumpwood</code>.</li>\n<li><strong>repository [str]:</strong>  Repository that will be used to fetch docker imagens for\nPumpwood Graph Datalake.</li>\n<li><strong>test_db_version [str]:</strong>  Version associated with test database for Pumpwood Graph\nDatalake.</li>\n<li><strong>test_db_repository [str]:</strong>  Repository associated with test database for Pumpwood Graph\nDatalake.</li>\n<li><strong>test_db_limits_memory [str]:</strong>  Set a maximum memory consumption for test database. Values\nshould be set using Gi (Gigabytes), Mi (Megabytes) and\nKi (Kilobytes) notation.</li>\n<li><strong>test_db_limits_cpu [str]:</strong>  Set a maximum CPU consumption for test database. It is better\nto set maximum resources using 'm' mili CPUs as default.\nEx.: limit consumption to 1 CPU <code>1000m</code>; limit consumption to\n1.5 CPU <code>1500m</code>; limit consumption to 0.5 CPU <code>500m</code>.</li>\n<li><strong>app_debug [bool]:</strong>  Set debug for application container.</li>\n<li><strong>app_replicas [int]:</strong>  Number of replicas associated with application.</li>\n<li><strong>app_timeout [int]:</strong>  Set in seconds timeout associated with application.</li>\n<li><strong>app_workers [int]:</strong>  Number of workers at gunicorn associated with application.</li>\n<li><strong>app_limits_memory [str]:</strong>  Set a maximum CPU consumption for application. Values\nshould be set using Gi (Gigabytes), Mi (Megabytes) and\nKi (Kilobytes) notation.</li>\n<li><strong>app_limits_cpu [str]:</strong>  Set a maximum CPU consumption for application. It is better\nto set maximum resources using 'm' mili CPUs as default.\nEx.: limit consumption to 1 CPU <code>1000m</code>; limit consumption to\n1.5 CPU <code>1500m</code>; limit consumption to 0.5 CPU <code>500m</code>.</li>\n<li><strong>app_requests_memory [str]:</strong>  Set memory requested associated with each pod for applcation.\nValues should be set using Gi (Gigabytes), Mi (Megabytes) and\nKi (Kilobytes) notation.</li>\n<li><strong>app_requests_cpu [str]:</strong>  Set CPU requested associated with each pod for applcation.\nIt is better to set maximum resources using 'm' mili CPUs\nas default. Ex.: limit consumption to 1 CPU <code>1000m</code>; limit\nconsumption to 1.5 CPU <code>1500m</code>; limit consumption to\n0.5 CPU <code>500m</code>.</li>\n<li><strong>worker_num_debug [str]:</strong>  Set debug for worker dataloader for numerical edges container.</li>\n<li><strong>worker_num_replicas [str]:</strong>  Number of replicas associated with worker for numerical edges\ncontainer.</li>\n<li><strong>worker_num_n_parallel [str]:</strong>  Number of parallel requests when uploading data to database.</li>\n<li><strong>worker_num_chunk_size [int]:</strong>  Chunk size associated with payload sent to database. It limits\nnumber of rows that will be saved at a requests.</li>\n<li><strong>worker_num_query_limit [int]:</strong>  Limits the numbers of rows that will be fetched from database\nwhen uploading data to backend.</li>\n<li><strong>worker_num_limits_memory [str]:</strong>  Set a maximum Memory consumption for dataloader worker for\nnumerical edges. Values should be set using Gi (Gigabytes),\nMi (Megabytes) and Ki (Kilobytes) notation.</li>\n<li><strong>worker_num_limits_cpu [str]:</strong>  Set a maximum CPU consumption for dataloader worker for\nnumerical edges. It is better\nto set maximum resources using 'm' mili CPUs as default.\nEx.: limit consumption to 1 CPU <code>1000m</code>; limit consumption to\n1.5 CPU <code>1500m</code>; limit consumption to 0.5 CPU <code>500m</code>.</li>\n<li><strong>worker_num_requests_memory [str]:</strong>  Set memory requested associated with each pod for applcation.\nValues should be set using Gi (Gigabytes), Mi (Megabytes) and\nKi (Kilobytes) notation.</li>\n<li><strong>worker_num_requests_cpu [str]:</strong>  Set CPU requested associated with each pod for applcation.\nIt is better to set maximum resources using 'm' mili CPUs\nas default. Ex.: limit consumption to 1 CPU <code>1000m</code>; limit\nconsumption to 1.5 CPU <code>1500m</code>; limit consumption to\n0.5 CPU <code>500m</code>.</li>\n<li><strong>worker_text_debug [str]:</strong>  Set debug for worker dataloader for text edges container.</li>\n<li><strong>worker_text_replicas [str]:</strong>  Number of replicas associated with worker for text edges\ncontainer.</li>\n<li><strong>worker_text_n_parallel [str]:</strong>  Number of parallel requests when uploading data to database.</li>\n<li><strong>worker_text_chunk_size [int]:</strong>  Chunk size associated with payload sent to database. It limits\nnumber of rows that will be saved at a requests.</li>\n<li><strong>worker_text_query_limit [int]:</strong>  Limits the numbers of rows that will be fetched from database\nwhen uploading data to backend.</li>\n<li><strong>worker_text_limits_memory [str]:</strong>  Set a maximum Memory consumption for dataloader worker for\ntext edges. Values should be set using Gi (Gigabytes),\nMi (Megabytes) and Ki (Kilobytes) notation.</li>\n<li><strong>worker_text_limits_cpu [str]:</strong>  Set a maximum CPU consumption for dataloader worker for\ntext edges. It is better\nto set maximum resources using 'm' mili CPUs as default.\nEx.: limit consumption to 1 CPU <code>1000m</code>; limit consumption to\n1.5 CPU <code>1500m</code>; limit consumption to 0.5 CPU <code>500m</code>.</li>\n<li><strong>worker_text_requests_memory [str]:</strong>  Set memory requested associated with each pod for applcation.\nValues should be set using Gi (Gigabytes), Mi (Megabytes) and\nKi (Kilobytes) notation.</li>\n<li><strong>worker_text_requests_cpu [str]:</strong>  Set CPU requested associated with each pod for applcation.\nIt is better to set maximum resources using 'm' mili CPUs\nas default. Ex.: limit consumption to 1 CPU <code>1000m</code>; limit\nconsumption to 1.5 CPU <code>1500m</code>; limit consumption to\n0.5 CPU <code>500m</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;microservice--graph-datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-graph-datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_query_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_num_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_n_parallel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_query_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_text_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_version", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_n_parallel", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_n_parallel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_chunk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_chunk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_query_limit", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_query_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_num_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_num_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_version", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_n_parallel", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_n_parallel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_chunk_size", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_chunk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_query_limit", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_query_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.worker_text_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.worker_text_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.test_db_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.test_db_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.test_db_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.test_db_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy.PumpWoodGraphDatalakeMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.deploy", "qualname": "PumpWoodGraphDatalakeMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kube_client</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice.TestPumpWoodDatalakeMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice", "qualname": "TestPumpWoodDatalakeMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice.TestPumpWoodDatalakeMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice", "qualname": "TestPumpWoodDatalakeMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice.TestPumpWoodDatalakeMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_graph_datalake.tests.test__PumpWoodDatalakeMicroservice", "qualname": "TestPumpWoodDatalakeMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "kind": "module", "doc": "<p>PumpWood Prediction Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-prediction\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-prediction-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-prediction-app\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-prediction-app\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-prediction\\n        image: {repository}/pumpwood-prediction-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        ports:\\n        - containerPort: 5000\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-prediction-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-prediction\\n              key: db_password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-prediction\\n                key: microservice_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-prediction-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-prediction-app\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-prediction-app\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.worker_rawdata", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "worker_rawdata", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-prediction-rawdata-workers\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-prediction-app\\n      function: rawdata\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: pumpwood-prediction-app\\n        function: rawdata\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-prediction-rawdata-workers\\n        image: {repository}/pumpwood-prediction-rawdata-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # DATALAKE DATALAKE\\n        - name: DATALAKE_DB_USERNAME\\n          value: {datalake_db_username}\\n        - name: DATALAKE_DB_HOST\\n          value: {datalake_db_host}\\n        - name: DATALAKE_DB_PORT\\n          value: {datalake_db_port}\\n        - name: DATALAKE_DB_DATABASE\\n          value: {datalake_db_database}\\n        - name: DATALAKE_DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-datalake\\n              key: db_password\\n\\n        # DATALAKE PREDICTION\\n        - name: PREDICTION_DB_USERNAME\\n          value: {db_username}\\n        - name: PREDICTION_DB_HOST\\n          value: {db_host}\\n        - name: PREDICTION_DB_PORT\\n          value: {db_port}\\n        - name: PREDICTION_DB_DATABASE\\n          value: {db_database}\\n        - name: PREDICTION_DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-prediction\\n              key: db_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        #Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-prediction\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.worker_dataloader", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "worker_dataloader", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-prediction-dataloader-workers\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-prediction-app\\n      function: dataloader\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: pumpwood-prediction-app\\n        function: dataloader\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-prediction-dataloader-workers\\n        image: {repository}/pumpwood-prediction-dataloader-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n\\n        env:\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-prediction\\n              key: db_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-prediction\\n                key: microservice_password\\n\\n        # CHUNKS\\n        - name: N_CHUNKS\\n          value: &quot;4&quot;\\n        - name: CHUNK_SIZE\\n          value: &quot;2000&quot;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-prediction\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-prediction-app\\n      function: prediction\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-prediction-app\\n        function: prediction\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-prediction\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-pumpwood-prediction:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-prediction-no-bouncer:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-prediction\\n  labels:\\n    type: db\\n    endpoint: pumpwood-prediction-app\\n    function: prediction\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-prediction-app\\n    function: prediction\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-prediction-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-prediction-app\\n    function: prediction\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-prediction-app\\n    function: prediction\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice", "kind": "class", "doc": "<p>PumpWoodTransformationMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.__init__", "kind": "function", "doc": "<p>__init__.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_rawdata_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_dataloader_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-datalake&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datalake_db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">raw_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">raw_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">raw_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">raw_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">raw_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.datalake_db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.datalake_db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.datalake_db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.datalake_db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.datalake_db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.datalake_db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.datalake_db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.datalake_db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.raw_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.raw_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.worker_rawdata_version", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.worker_rawdata_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.raw_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.raw_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.raw_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.raw_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.raw_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.raw_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.raw_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.raw_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.worker_dataloader_version", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.worker_dataloader_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.dataloader_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.dataloader_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.dataloader_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.dataloader_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.dataloader_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.dataloader_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.dataloader_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.dataloader_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.dataloader_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.dataloader_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.deploy.PumpWoodPredictionMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.deploy", "qualname": "PumpWoodPredictionMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>Non Args.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice.TestPumpWoodPredictionMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice", "qualname": "TestPumpWoodPredictionMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice.TestPumpWoodPredictionMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice", "qualname": "TestPumpWoodPredictionMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice.TestPumpWoodPredictionMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_prediction.tests.test__PumpWoodPredictionMicroservice", "qualname": "TestPumpWoodPredictionMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "kind": "module", "doc": "<p>PumpWood Scheduler Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-scheduler\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.app_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "app_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-scheduler-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-scheduler-app\\n      function: scheduler\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-scheduler-app\\n        function: scheduler\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-scheduler\\n        image: {repository}/pumpwood-scheduler-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-scheduler-app/\\n            port: 5000\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-scheduler\\n              key: db_password\\n\\n        # RABBITMQ ETL\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-scheduler\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-scheduler-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-scheduler-app\\n    function: scheduler\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-scheduler-app\\n    function: scheduler\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.worker_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "worker_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-scheduler-worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-scheduler-app\\n      function: dataloader\\n  template:\\n    metadata:\\n      labels:\\n          type: worker\\n          endpoint: pumpwood-scheduler-app\\n          function: dataloader\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-worker\\n        image: {repository}/pumpwood-scheduler-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-scheduler\\n              key: db_password\\n\\n        # RABBITMQ\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-scheduler\\n                key: microservice_password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-scheduler\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-scheduler-app\\n      function: scheduler\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-scheduler-app\\n        function: scheduler\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-scheduler\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres-pumpwood-scheduler\\n        image: {repository}/test-db-pumpwood-scheduler:{version}\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-scheduler-no-bouncer:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n          limits:\\n            cpu: &quot;3&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-scheduler\\n  labels:\\n    type: db\\n    endpoint: pumpwood-scheduler-app\\n    function: scheduler\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-scheduler-app\\n    function: scheduler\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-scheduler-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-scheduler-app\\n    function: scheduler\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-scheduler-app\\n    function: scheduler\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice", "kind": "class", "doc": "<p>PumpWoodSchedulerMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-scheduler&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.worker_version", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.worker_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.worker_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.worker_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.worker_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.worker_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.worker_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.worker_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.worker_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.worker_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.worker_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.worker_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy.PumpWoodSchedulerMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.deploy", "qualname": "PumpWoodSchedulerMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice.TestPumpWoodSchedulerMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice", "qualname": "TestPumpWoodSchedulerMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice.TestPumpWoodSchedulerMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice", "qualname": "TestPumpWoodSchedulerMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice.TestPumpWoodSchedulerMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_scheduler.tests.test__PumpWoodSchedulerMicroservice", "qualname": "TestPumpWoodSchedulerMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.secrets", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: pumpwood-transformation\\ntype: Opaque\\ndata:\\n  db_password: {db_password}\\n  microservice_password: {microservice_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.transformation_deployment", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "transformation_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-transformation-app\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: app\\n      endpoint: pumpwood-transformation-app\\n      function: transformation\\n  template:\\n    metadata:\\n      labels:\\n        type: app\\n        endpoint: pumpwood-transformation-app\\n        function: transformation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-transformation\\n        image: {repository}/pumpwood-transformation-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        ports:\\n        - containerPort: 5000\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/pumpwood-transformation-app/\\n            port: 5000\\n\\n        env:\\n        - name: DEBUG\\n          value: &quot;{debug}&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n        - name: N_WORKERS\\n          value: &quot;{n_workers}&quot;\\n\\n        - name: HASH_SALT\\n          valueFrom:\\n            secretKeyRef:\\n              name: hash-salt\\n              key: hash_salt\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-transformation\\n              key: db_password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-transformation\\n                key: microservice_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: pumpwood-transformation-app\\n  labels:\\n    type: app\\n    endpoint: pumpwood-transformation-app\\n    function: transformation\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: app\\n    endpoint: pumpwood-transformation-app\\n    function: transformation\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.transformation_worker_estimation", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "transformation_worker_estimation", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-transformation-estimation-worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-transformation-app\\n      function: transformation-estimation\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: pumpwood-transformation-app\\n        function: transformation-estimation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-transformation\\n        image: {repository}/pumpwood-transformation-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        command: [&quot;bash&quot;, &quot;/app/start_estimation_worker.sh&quot;]\\n        env:\\n        - name: APP_DEBUG\\n          value: &quot;False&quot;\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-transformation\\n              key: db_password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-transformation\\n                key: microservice_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.transformation_worker_prediction", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "transformation_worker_prediction", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-transformation-transformation-worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: worker\\n      endpoint: pumpwood-transformation-app\\n      function: transformation-transformation\\n  template:\\n    metadata:\\n      labels:\\n        type: worker\\n        endpoint: pumpwood-transformation-app\\n        function: transformation-transformation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: pumpwood-transformation\\n        image: {repository}/pumpwood-transformation-app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        command: [&quot;bash&quot;, &quot;/app/start_transformation_worker.sh&quot;]\\n        env:\\n        - name: APP_DEBUG\\n          value: &quot;False&quot;\\n\\n        # Database\\n        - name: DB_USERNAME\\n          value: {db_username}\\n        - name: DB_HOST\\n          value: {db_host}\\n        - name: DB_PORT\\n          value: &quot;{db_port}&quot;\\n        - name: DB_DATABASE\\n          value: {db_database}\\n        - name: DB_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-transformation\\n              key: db_password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: pumpwood-transformation\\n                key: microservice_password\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_HOST\\n          value: &quot;rabbitmq-main&quot;\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n              secretKeyRef:\\n                name: azure--storage-key\\n                key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n              secretKeyRef:\\n                name: aws--storage-key\\n                key: aws_secret_access_key\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.test_postgres", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "test_postgres", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-pumpwood-transformation\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: pumpwood-transformation-app\\n      function: transformation\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: pumpwood-transformation-app\\n        function: transformation\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      # PGBouncer Container\\n      - name: pgbouncer\\n        image: bitnami/pgbouncer:1.21.0\\n        env:\\n        - name: POSTGRESQL_USERNAME\\n          value: pumpwood\\n        - name: POSTGRESQL_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: pumpwood-transformation\\n              key: db_password\\n        - name: POSTGRESQL_HOST\\n          value: 0.0.0.0\\n        - name: PGBOUNCER_DATABASE\\n          value: pumpwood\\n        - name: PGBOUNCER_SET_DATABASE_USER\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_SET_DATABASE_PASSWORD\\n          value: \\&#x27;yes\\&#x27;\\n        - name: PGBOUNCER_POOL_MODE\\n          value: transaction\\n        ports:\\n        - containerPort: 6432\\n\\n      - name: postgres\\n        image: {repository}/test-db-pumpwood-transformation:{version}\\n        imagePullPolicy: IfNotPresent\\n        env:\\n        - name: KONG_API\\n          value: http://load-balancer:8001/\\n        - name: SERVICE_URL\\n          value: http://postgres-pumpwood-transformation-no-bouncer:5000/\\n        resources:\\n          limits:\\n            memory: &quot;1Gi&quot;\\n            cpu:  &quot;1000m&quot;\\n        ports:\\n        - containerPort: 5432\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-transformation\\n  labels:\\n    type: db\\n    endpoint: pumpwood-transformation-app\\n    function: transformation\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 6432\\n  selector:\\n    type: db\\n    endpoint: pumpwood-transformation-app\\n    function: transformation\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-pumpwood-transformation-no-bouncer\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: pumpwood-transformation-app\\n    function: transformation\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: postgres-port\\n      port: 5432\\n      targetPort: 5432\\n    - name: regen-port\\n      port: 5000\\n      targetPort: 5000\\n  selector:\\n    type: db\\n    endpoint: pumpwood-transformation-app\\n    function: transformation\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice", "kind": "class", "doc": "<p>PumpWoodTransformationMicroservice.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.__init__", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>db_password (str):</strong>  password at database.</li>\n<li><strong>microservice_password (str):</strong>  Microservice password.</li>\n<li><strong>disk_size (str):</strong>  Disk size (ex.: 50Gi, 100Gi)</li>\n<li><strong>disk_name (str):</strong>  Name of the disk that will be used in postgres</li>\n<li><strong>postgres_public_ip (str):</strong>  Postgres public IP.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket (Storage)</li>\n<li><strong>app_version (str):</strong>  App version.</li>\n<li><strong>version_rawdata (str):</strong>  Version of the raw data worker.</li>\n<li><strong>version_dataloader (str):</strong>  Version of the raw data worker.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>firewall_ips (list[str]): List with the IPs to allow connection to\n    database.\n  repository (str): Repository to pull Image.\n  workers_timeout (int): Time in seconds to timeout of uwsgi worker.\n  db_username (str): Database connection username.\n  db_host (str): Database connection host.\n  db_port (str): Database connection port.\n  db_database (str): Database connection database.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PumpWoodDatalakeMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-pumpwood-transformation&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pumpwood&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_debug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FALSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">app_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">app_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">app_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_estimation_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_estimation_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_estimation_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_estimation_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_estimation_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_transformation_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_transformation_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_transformation_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_transformation_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_transformation_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.bucket_name", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.base_path", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.repository", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_version", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_debug", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_timeout", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_workers", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.app_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.app_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_estimation_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_estimation_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_estimation_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_estimation_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_estimation_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_estimation_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_estimation_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_estimation_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_estimation_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_estimation_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_transformation_replicas", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_transformation_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_transformation_limits_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_transformation_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_transformation_limits_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_transformation_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_transformation_requests_memory", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_transformation_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.worker_transformation_requests_cpu", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.worker_transformation_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.db_username", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.db_username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.db_host", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.db_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.db_port", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.db_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.db_database", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.db_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.test_db_version", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.test_db_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.test_db_repository", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.test_db_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.deploy.PumpWoodTransformationMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.deploy", "qualname": "PumpWoodTransformationMicroservice.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kube_client:</strong>  Client to communicate with Kubernets cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice.TestPumpWoodTransformationMicroservice", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice", "qualname": "TestPumpWoodTransformationMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice.TestPumpWoodTransformationMicroservice.test__create_files", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice", "qualname": "TestPumpWoodTransformationMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice.TestPumpWoodTransformationMicroservice.test__create_files_with_test_database", "modulename": "pumpwood_deploy.microservices.pumpwood_transformation.tests.test__PumpWoodTransformationMicroservice", "qualname": "TestPumpWoodTransformationMicroservice.test__create_files_with_test_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.standard", "modulename": "pumpwood_deploy.microservices.standard", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy", "modulename": "pumpwood_deploy.microservices.standard.deploy", "kind": "module", "doc": "<p>Create standard deploy and secrets.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.kong_deployment", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "kong_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: apigateway-kong\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      type: apigateway-kong\\n  template:\\n    metadata:\\n      labels:\\n        type: apigateway-kong\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: apigateway-kong\\n        image: andrebaceti/autoboostrap-kong:1.0\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        readinessProbe:\\n           exec:\\n             command:\\n               - kong\\n               - health\\n        ports:\\n        # Consumers Ports\\n        - containerPort: 8000\\n        - containerPort: 8443\\n        # Admin Ports\\n        - containerPort: 8001\\n        - containerPort: 8444\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: load-balancer\\n  labels:\\n    type: load-balancer\\n    destination: internal\\nspec:\\n  type: ClusterIP\\n  selector:\\n    type: apigateway-kong\\n  ports:\\n  # Consumers Ports\\n  - name: consumers-http\\n    port: 8000\\n    targetPort: 8000\\n  - name: consumers-https\\n    port: 8443\\n    targetPort: 8443\\n  # Admin Ports\\n  - name: admin-http\\n    port: 8001\\n    targetPort: 8001\\n  - name: admin-https\\n    port: 8444\\n    targetPort: 8444\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.rabbitmq_deployment", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "rabbitmq_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: rabbitmq-main\\n  labels:\\n    type: queue\\n    queue: rabbitmq-main\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - name: ui\\n      port: 15672\\n      targetPort: 15672\\n    - name: broker\\n      port: 5672\\n      targetPort: 5672\\n  selector:\\n    type: queue\\n    queue: rabbitmq-main\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: rabbitmq-main\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: queue\\n      queue: rabbitmq-main\\n  template:\\n    metadata:\\n      labels:\\n        type: queue\\n        queue: rabbitmq-main\\n    spec:\\n      restartPolicy: Always\\n      volumes:\\n      - name: secrets\\n        secret:\\n          secretName: rabbitmq-main-secrets\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: rabbitmq-main\\n        image: rabbitmq:3.8-management\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        env:\\n        - name: RABBITMQ_DEFAULT_USER\\n          value: \\&#x27;pumpwood\\&#x27;\\n        - name: RABBITMQ_DEFAULT_PASS\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n        ports:\\n        - name: \\&#x27;queue\\&#x27;\\n          containerPort: 5672\\n        - name: \\&#x27;ui\\&#x27;\\n          containerPort: 15672\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.rabbitmq_secrets", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "rabbitmq_secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: rabbitmq-main-secrets\\ntype: Opaque\\ndata:\\n  password: {password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.model_secrets", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "model_secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: microservice-model-secrets\\ntype: Opaque\\ndata:\\n  password: {password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.hash_salt", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "hash_salt", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: hash-salt\\ntype: Opaque\\ndata:\\n  hash_salt: {hash_salt}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.kong_postgres_deployment", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "kong_postgres_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-kong-database\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      db: postgres-kong-database\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        db: postgres-kong-database\\n    spec:\\n      volumes:\\n      - name: postgres-kong-database-data\\n        persistentVolumeClaim:\\n          claimName: postgres-kong-database\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: postgres-kong-database\\n        image: postgres:11\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        env:\\n        - name: POSTGRES_USER\\n          value: kong\\n        - name: POSTGRES_PASSWORD\\n          value: kong\\n        - name: PGDATA\\n          value: /var/lib/postgresql/data/pgdata\\n        volumeMounts:\\n        - name: postgres-kong-database-data\\n          mountPath: /var/lib/postgresql/data/\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-kong-database\\n  labels:\\n    type: db\\n    db: postgres-kong-database\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 5432\\n  selector:\\n    type: db\\n    db: postgres-kong-database\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.azure__storage_key_secrets", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "azure__storage_key_secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: azure--storage-key\\ntype: Opaque\\ndata:\\n  azure_storage_connection_string: {azure_storage_connection_string}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.gcp__storage_key_secrets", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "gcp__storage_key_secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: gcp--storage-key\\ntype: Opaque\\ndata:\\n  empty: bm90X2NvbmZpZ3VyZWQ=\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.aws__storage_key_secrets", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "aws__storage_key_secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: aws--storage-key\\ntype: Opaque\\ndata:\\n  aws_access_key_id: {aws_access_key_id}\\n  aws_secret_access_key: {aws_secret_access_key}\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.storage_config_map", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "storage_config_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: storage\\ndata:\\n  storage_type: &quot;{storage_type}&quot;\\n&#x27;"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices", "kind": "class", "doc": "<p>Create StandardMicroservices.</p>\n\n<p>Create RabbitMQ deployment and secrets, storage bucket key secret.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices.__init__", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hash_salt (str):</strong>  Hash salt of hash identification at the\nmicroservices.</li>\n<li><strong>rabbit_password (str):</strong>  rabbit_password for rabbitMQ login.</li>\n<li><strong>bucket_key_path (str):</strong>  Path to bucket JSON key.</li>\n<li><strong>storage_type (str):</strong>  Storage provider must be in [\n'azure_storage', 'google_bucket', 'aws_s3'], correpond to the\nprovider os the flat file storage system.</li>\n<li><strong>storage_deploy_args (str):</strong>  Args used to access storage at the\npods. Each provider must have diferent arguments:\n# azure_storage:\n<ul>\n<li>azure_storage_connection_string: Set conenction string to\na blob storage.\n# google_bucket:</li>\n<li>credential_file: Set a path to a credetial file of a service\nuser with access to the bucket that will be used at the\ndeployment.\n# aws_s3:</li>\n<li>aws_access_key_id: Access key of the service user with\naccess to the s3 used in deployment.</li>\n<li>aws_secret_access_key: Access secret of the service user with\naccess to the s3 used in deployment.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"kwards\">Kwards:</h6>\n\n<blockquote>\n  <p>kong_db_disk_name [str]: Kong postgres disk name, usually not\n      set for test purposes.\n  kong_db_disk_size [str]: Kong postgres disk size, usually not\n      set for test purposes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">hash_salt</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">rabbit_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_user_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">storage_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">storage_deploy_args</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kong_db_disk_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kong_db_disk_size</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kong_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices.kong_repository", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices.kong_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices.storage_type", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices.storage_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices.kong_db_disk_name", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices.kong_db_disk_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices.kong_db_disk_size", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices.kong_db_disk_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.deploy.StandardMicroservices.create_deployment_file", "modulename": "pumpwood_deploy.microservices.standard.deploy", "qualname": "StandardMicroservices.create_deployment_file", "kind": "function", "doc": "<p>Create deployment file.</p>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>kube_client: Client to communicate with Kubernets cluster.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kube_client</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.microservices.standard.tests.test__PumpWoodTransformationMicroservice", "modulename": "pumpwood_deploy.microservices.standard.tests.test__PumpWoodTransformationMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.microservices.standard.tests.test__PumpWoodTransformationMicroservice.TestStandardMicroservices", "modulename": "pumpwood_deploy.microservices.standard.tests.test__PumpWoodTransformationMicroservice", "qualname": "TestStandardMicroservices", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.microservices.standard.tests.test__PumpWoodTransformationMicroservice.TestStandardMicroservices.test__create_files", "modulename": "pumpwood_deploy.microservices.standard.tests.test__PumpWoodTransformationMicroservice", "qualname": "TestStandardMicroservices.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.models", "modulename": "pumpwood_deploy.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy", "modulename": "pumpwood_deploy.models.deploy", "kind": "module", "doc": "<p>Google Trends data crawler module.</p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels", "kind": "class", "doc": "<p>Class to help deployment of StatsmodelsGLMModels.</p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.__init__", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_type (str):</strong>  Model type.</li>\n<li><strong>bucket_name (str):</strong>  Name of the bucket to be used.</li>\n<li><strong>version (str):</strong>  Version of the model.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>repository (str): Repository path.\n  workers_timeout (int): time in seconds to guinicorn wait for\n      worker response.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">workers_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span></span>)</span>"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.base_path", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.model_type", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.model_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.bucket_name", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.repository", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.workers_timeout", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.workers_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.version", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.create_deployment_file", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.create_deployment_file", "kind": "function", "doc": "<p>Create Google Trends deployment files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.models.deploy.PumpwoodModels.end_points", "modulename": "pumpwood_deploy.models.deploy", "qualname": "PumpwoodModels.end_points", "kind": "function", "doc": "<p>Return microservices end-points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.models.resources_yml", "modulename": "pumpwood_deploy.models.resources_yml", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.resources_yml.yml_resources", "modulename": "pumpwood_deploy.models.resources_yml.yml_resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.models.resources_yml.yml_resources.app_yml", "modulename": "pumpwood_deploy.models.resources_yml.yml_resources", "qualname": "app_yml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-model--{model_type}--app\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: model\\n      model_type: {model_type}\\n      role: app\\n  template:\\n    metadata:\\n      labels:\\n        type: model\\n        model_type: {model_type}\\n        role: app\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: bucket-key\\n        secret:\\n          secretName: bucket-key\\n      containers:\\n      - name: pumpwood-model--{model_type}--app\\n        image: {repository}/pumpwood-model--{model_type}--app:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: bucket-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        readinessProbe:\\n          httpGet:\\n            path: /health-check/model-api/{model_type}\\n            port: 5000\\n        env:\\n        # Config\\n        - name: APP_DEBUG\\n          value: &quot;False&quot;\\n        - name: WORKERS_TIMEOUT\\n          value: &quot;{workers_timeout}&quot;\\n\\n        # Google\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          value: \\&#x27;google_bucket\\&#x27;\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_NAME\\n          value: \\&#x27;app-model--{model_type}\\&#x27;\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: microservice-model-secrets\\n                key: password\\n        ports:\\n        - containerPort: 5000\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: modelrun--{model_type}\\n  labels:\\n    role: app\\n    type: model\\n    model_type: {model_type}\\n    endpoint: modelrun--{model_type}\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5000\\n      targetPort: 5000\\n  selector:\\n      role: app\\n      type: model\\n      model_type: {model_type}\\n&#x27;"}, {"fullname": "pumpwood_deploy.models.resources_yml.yml_resources.estimation_yml", "modulename": "pumpwood_deploy.models.resources_yml.yml_resources", "qualname": "estimation_yml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-model--{model_type}--estimation-worker\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: model\\n      role: estimation\\n      model_type: {model_type}\\n  template:\\n    metadata:\\n      labels:\\n        type: model\\n        role: estimation\\n        model_type: {model_type}\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: bucket-key\\n        secret:\\n          secretName: bucket-key\\n      containers:\\n      - name: pumpwood-model--{model_type}--estimation\\n        image: {repository}/pumpwood-model--{model_type}--estimation-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: bucket-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # Google\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          value: \\&#x27;google_bucket\\&#x27;\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_NAME\\n          value: \\&#x27;estimation-model--{model_type}\\&#x27;\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: microservice-model-secrets\\n                key: password\\n        ports:\\n        - containerPort: 5000\\n&#x27;"}, {"fullname": "pumpwood_deploy.models.resources_yml.yml_resources.prediction_yml", "modulename": "pumpwood_deploy.models.resources_yml.yml_resources", "qualname": "prediction_yml", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: pumpwood-model--{model_type}--prediction-worker\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: model\\n      role: prediction\\n      model_type: {model_type}\\n  template:\\n    metadata:\\n      labels:\\n        type: model\\n        role: prediction\\n        model_type: {model_type}\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: bucket-key\\n        secret:\\n          secretName: bucket-key\\n      containers:\\n      - name: pumpwood-model--{model_type}--prediction\\n        image: {repository}/pumpwood-model--{model_type}--prediction-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            cpu: &quot;1m&quot;\\n        volumeMounts:\\n          - name: bucket-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        env:\\n        # Google\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          value: \\&#x27;google_bucket\\&#x27;\\n\\n        # RABBITMQ QUEUE\\n        - name: RABBITMQ_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: rabbitmq-main-secrets\\n              key: password\\n\\n        # Microsservice\\n        - name: MICROSERVICE_NAME\\n          value: \\&#x27;prediction-model--{model_type}\\&#x27;\\n        - name: MICROSERVICE_PASSWORD\\n          valueFrom:\\n              secretKeyRef:\\n                name: microservice-model-secrets\\n                key: password\\n        ports:\\n        - containerPort: 5000\\n&#x27;"}, {"fullname": "pumpwood_deploy.trino", "modulename": "pumpwood_deploy.trino", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy", "modulename": "pumpwood_deploy.trino.deploy", "kind": "module", "doc": "<p>PumpWood DataLake Microservice Deploy.</p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.coordinator_deployment", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "coordinator_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: trino-coordinator\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: trino\\n      function: coordinator\\n  template:\\n    metadata:\\n      labels:\\n          type: db\\n          endpoint: trino\\n          function: coordinator\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: trino--catalog-file-secret\\n        secret:\\n          secretName: trino--catalog-file-secret\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: trino-coordinator\\n        image: andrebaceti/trino-coordinator:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: trino--catalog-file-secret\\n            readOnly: true\\n            mountPath: /catalog\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        ports:\\n        - containerPort: 8080\\n        env:\\n        - name: SHARED_SECRET\\n          valueFrom:\\n            secretKeyRef:\\n              name: trino\\n              key: shared_secret\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: trino-coordinator\\n  labels:\\n      type: app\\n      endpoint: trino-coordinator\\n      function: dashboard\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 8080\\n      targetPort: 8080\\n  selector:\\n      type: db\\n      endpoint: trino\\n      function: coordinator\\n&#x27;"}, {"fullname": "pumpwood_deploy.trino.deploy.worker_deployment", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "worker_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: trino-worker\\nspec:\\n  replicas: {replicas}\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: trino\\n      function: worker\\n  template:\\n    metadata:\\n      labels:\\n          type: db\\n          endpoint: trino\\n          function: worker\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: trino--catalog-file-secret\\n        secret:\\n          secretName: trino--catalog-file-secret\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: trino-worker\\n        image: andrebaceti/trino-worker:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n          - name: trino--catalog-file-secret\\n            readOnly: true\\n            mountPath: /catalog\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        ports:\\n        - containerPort: 8080\\n        env:\\n        - name: SHARED_SECRET\\n          valueFrom:\\n            secretKeyRef:\\n              name: trino\\n              key: shared_secret\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: trino-worker\\n  labels:\\n      type: app\\n      endpoint: trino-worker\\n      function: dashboard\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 8080\\n      targetPort: 8080\\n  selector:\\n      type: db\\n      endpoint: trino\\n      function: worker\\n&#x27;"}, {"fullname": "pumpwood_deploy.trino.deploy.hive_deployment", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "hive_deployment", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion : &quot;apps/v1&quot;\\nkind: Deployment\\nmetadata:\\n  name: hive-metastore-app\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: hive\\n      function: metastore\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: hive\\n        function: metastore\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: gcp--storage-key\\n        secret:\\n          secretName: gcp--storage-key\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: hive-metastore\\n        image: docker.io/andrebaceti/hive-metastore-pumpwood:0.2.14\\n        imagePullPolicy: IfNotPresent\\n        volumeMounts:\\n          - name: gcp--storage-key\\n            readOnly: true\\n            mountPath: /etc/secrets\\n        resources:\\n          requests:\\n            memory: &quot;{requests_memory}&quot;\\n            cpu:  &quot;{requests_cpu}&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        ports:\\n          - containerPort: 9083\\n            name: \\&#x27;metastore\\&#x27;\\n          - containerPort: 10000\\n            name: \\&#x27;hiveserver2\\&#x27;\\n        env:\\n        #####################\\n        # Postgres database #\\n        - name: DATABASE_USER\\n          valueFrom:\\n            secretKeyRef:\\n              name: hive\\n              key: database_user\\n        - name: DATABASE_PASSWORD\\n          valueFrom:\\n            secretKeyRef:\\n              name: hive\\n              key: database_password\\n        - name: DATABASE_HOST\\n          value: &quot;{database_host}&quot;\\n        - name: DATABASE_PORT\\n          value: &quot;{database_port}&quot;\\n        - name: DATABASE_DB\\n          value: &quot;{database_db}&quot;\\n\\n        ###########\\n        # STORAGE #\\n        - name: STORAGE_BUCKET_NAME\\n          value: {bucket_name}\\n        - name: STORAGE_TYPE\\n          valueFrom:\\n            configMapKeyRef:\\n              name: storage\\n              key: storage_type\\n\\n        # GCP\\n        - name: GOOGLE_APPLICATION_CREDENTIALS\\n          value: &quot;/etc/secrets/key-storage.json&quot;\\n\\n        # AZURE\\n        - name: AZURE_STORAGE_CONNECTION_STRING\\n          valueFrom:\\n            secretKeyRef:\\n              name: azure--storage-key\\n              key: azure_storage_connection_string\\n\\n        # AWS\\n        - name: AWS_ACCESS_KEY_ID\\n          valueFrom:\\n            secretKeyRef:\\n              name: aws--storage-key\\n              key: aws_access_key_id\\n        - name: AWS_SECRET_ACCESS_KEY\\n          valueFrom:\\n            secretKeyRef:\\n              name: aws--storage-key\\n              key: aws_secret_access_key\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: hive-metastore-app\\n  labels:\\n      type: db\\n      endpoint: hive\\n      function: metastore\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 9083\\n      targetPort: 9083\\n      name: \\&#x27;metastore\\&#x27;\\n    - port: 10000\\n      targetPort: 10000\\n      name: \\&#x27;hiveserver2\\&#x27;\\n  selector:\\n      type: db\\n      endpoint: hive\\n      function: metastore\\n&#x27;"}, {"fullname": "pumpwood_deploy.trino.deploy.postgres__test", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "postgres__test", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: postgres-hive-metastore\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      type: db\\n      endpoint: hive-metastore\\n  template:\\n    metadata:\\n      labels:\\n        type: db\\n        endpoint: hive-metastore\\n    spec:\\n      imagePullSecrets:\\n        - name: dockercfg\\n      volumes:\\n      - name: dshm\\n        emptyDir:\\n          medium: Memory\\n      affinity:\\n        nodeAffinity:\\n          requiredDuringSchedulingIgnoredDuringExecution:\\n            nodeSelectorTerms:\\n            - matchExpressions:\\n              - key: function\\n                operator: NotIn\\n                values:\\n                - system\\n      containers:\\n      - name: postgres\\n        image: {repository}test-db-hive-metastore:{version}\\n        imagePullPolicy: IfNotPresent\\n        resources:\\n          requests:\\n            memory: &quot;20Mi&quot;\\n            cpu:  &quot;1m&quot;\\n          limits:\\n            memory: &quot;{limits_memory}&quot;\\n            cpu:  &quot;{limits_cpu}&quot;\\n        volumeMounts:\\n        - name: dshm\\n          mountPath: /dev/shm\\n        ports:\\n        - containerPort: 5432\\n---\\napiVersion : &quot;v1&quot;\\nkind: Service\\nmetadata:\\n  name: postgres-hive-metastore\\n  labels:\\n    type: db-no-bouncer\\n    endpoint: hive-metastore\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 5432\\n      targetPort: 5432\\n  selector:\\n    type: db\\n    endpoint: hive-metastore\\n&#x27;"}, {"fullname": "pumpwood_deploy.trino.deploy.secrets_trino", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "secrets_trino", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: trino\\ntype: Opaque\\ndata:\\n  shared_secret: {shared_secret}\\n---\\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: hive\\ntype: Opaque\\ndata:\\n  database_user: {hive_database_user}\\n  database_password: {hive_database_password}\\n&#x27;"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice", "kind": "class", "doc": "<p>Deploy Metabase as microservice.</p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.__init__", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.__init__", "kind": "function", "doc": "<p>__init__: Class constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shared_secret (str):</strong>  Coordenator/Workers shared secret.</li>\n<li><strong>catalog_dir_zip (str):</strong>  Catalog directiory zip file path. It\nis a path to the catalog directiory containing\ndatabase connections.</li>\n</ul>\n\n<h6 id=\"kwargs\">Kwargs:</h6>\n\n<blockquote>\n  <p>No Kwargs.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TrinoMicroservice: New Object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>No especific raises.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>No example yet.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">shared_secret</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">catalog_dir_zip_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bucket_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">worker_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">worker_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">coordenator_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">coordenator_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">coordenator_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">coordenator_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_postgres_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_postgres_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_postgres_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hive_metastore&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_postgres_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgres-hive-metastore&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_postgres_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;5432&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_metastore_requests_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;20Mi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_metastore_requests_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_metastore_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;60Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hive_metastore_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_hive_metastore_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_hive_metastore_repository</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gcr.io/repositorio-geral-170012&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_hive_metastore_limits_memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3Gi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test_db_hive_metastore_limits_cpu</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;4000m&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;430-1.5&#39;</span></span>)</span>"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.worker_replicas", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.worker_replicas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.base_path", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.bucket_name", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.bucket_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_postgres_database", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_postgres_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_postgres_host", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_postgres_host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_postgres_port", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_postgres_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.version", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.worker_limits_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.worker_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.worker_limits_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.worker_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.worker_requests_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.worker_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.worker_requests_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.worker_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.coordenator_limits_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.coordenator_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.coordenator_limits_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.coordenator_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.coordenator_requests_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.coordenator_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.coordenator_requests_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.coordenator_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_metastore_requests_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_metastore_requests_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_metastore_requests_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_metastore_requests_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_metastore_limits_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_metastore_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.hive_metastore_limits_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.hive_metastore_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.test_db_hive_metastore_version", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.test_db_hive_metastore_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.test_db_hive_metastore_repository", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.test_db_hive_metastore_repository", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.test_db_hive_metastore_limits_memory", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.test_db_hive_metastore_limits_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.test_db_hive_metastore_limits_cpu", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.test_db_hive_metastore_limits_cpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.deploy.TrinoMicroservice.create_deployment_file", "modulename": "pumpwood_deploy.trino.deploy", "qualname": "TrinoMicroservice.create_deployment_file", "kind": "function", "doc": "<p>create_deployment_file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_deploy.trino.resources", "modulename": "pumpwood_deploy.trino.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.tests", "modulename": "pumpwood_deploy.trino.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_deploy.trino.tests.test__TrinoMicroservice", "modulename": "pumpwood_deploy.trino.tests.test__TrinoMicroservice", "kind": "module", "doc": "<p>Login tests.</p>\n"}, {"fullname": "pumpwood_deploy.trino.tests.test__TrinoMicroservice.TestTrinoMicroservice", "modulename": "pumpwood_deploy.trino.tests.test__TrinoMicroservice", "qualname": "TestTrinoMicroservice", "kind": "class", "doc": "<p>Test user login.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "pumpwood_deploy.trino.tests.test__TrinoMicroservice.TestTrinoMicroservice.test__create_files", "modulename": "pumpwood_deploy.trino.tests.test__TrinoMicroservice", "qualname": "TestTrinoMicroservice.test__create_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();